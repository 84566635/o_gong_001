; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--debug -c --asm --interleave -o.\out\stm32f10x_pwr.o --depend=.\out\stm32f10x_pwr.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\user\inc -I.\stdperiph_driver\inc -I.\cmsis -ID:\ARM\INC -ID:\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\out\stm32f10x_pwr.crf stdperiph_driver\src\stm32f10x_pwr.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  PWR_DeInit PROC
;;;111      */
;;;112    void PWR_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;113    {
;;;114      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
000002  2101              MOVS     r1,#1
000004  0708              LSLS     r0,r1,#28
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;115      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f04f5080          MOV      r0,#0x10000000
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;116    }
000014  bd10              POP      {r4,pc}
;;;117    
                          ENDP

                  PWR_BackupAccessCmd PROC
;;;123      */
;;;124    void PWR_BackupAccessCmd(FunctionalState NewState)
000016  492b              LDR      r1,|L1.196|
;;;125    {
;;;126      /* Check the parameters */
;;;127      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;128      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
000018  6208              STR      r0,[r1,#0x20]
;;;129    }
00001a  4770              BX       lr
;;;130    
                          ENDP

                  PWR_PVDCmd PROC
;;;136      */
;;;137    void PWR_PVDCmd(FunctionalState NewState)
00001c  4929              LDR      r1,|L1.196|
;;;138    {
;;;139      /* Check the parameters */
;;;140      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;141      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
00001e  6108              STR      r0,[r1,#0x10]
;;;142    }
000020  4770              BX       lr
;;;143    
                          ENDP

                  PWR_PVDLevelConfig PROC
;;;157      */
;;;158    void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
000022  2100              MOVS     r1,#0
;;;159    {
;;;160      uint32_t tmpreg = 0;
;;;161      /* Check the parameters */
;;;162      assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
;;;163      tmpreg = PWR->CR;
000024  4a28              LDR      r2,|L1.200|
000026  6811              LDR      r1,[r2,#0]
;;;164      /* Clear PLS[7:5] bits */
;;;165      tmpreg &= CR_PLS_MASK;
000028  f02101e0          BIC      r1,r1,#0xe0
;;;166      /* Set PLS[7:5] bits according to PWR_PVDLevel value */
;;;167      tmpreg |= PWR_PVDLevel;
00002c  4301              ORRS     r1,r1,r0
;;;168      /* Store the new value */
;;;169      PWR->CR = tmpreg;
00002e  6011              STR      r1,[r2,#0]
;;;170    }
000030  4770              BX       lr
;;;171    
                          ENDP

                  PWR_WakeUpPinCmd PROC
;;;177      */
;;;178    void PWR_WakeUpPinCmd(FunctionalState NewState)
000032  4926              LDR      r1,|L1.204|
;;;179    {
;;;180      /* Check the parameters */
;;;181      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;182      *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
000034  6008              STR      r0,[r1,#0]
;;;183    }
000036  4770              BX       lr
;;;184    
                          ENDP

                  PWR_EnterSTOPMode PROC
;;;196      */
;;;197    void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
000038  b510              PUSH     {r4,lr}
;;;198    {
;;;199      uint32_t tmpreg = 0;
00003a  2200              MOVS     r2,#0
;;;200      /* Check the parameters */
;;;201      assert_param(IS_PWR_REGULATOR(PWR_Regulator));
;;;202      assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
;;;203      
;;;204      /* Select the regulator state in STOP mode ---------------------------------*/
;;;205      tmpreg = PWR->CR;
00003c  4b22              LDR      r3,|L1.200|
00003e  681a              LDR      r2,[r3,#0]
;;;206      /* Clear PDDS and LPDS bits */
;;;207      tmpreg &= CR_DS_MASK;
000040  f0220203          BIC      r2,r2,#3
;;;208      /* Set LPDS bit according to PWR_Regulator value */
;;;209      tmpreg |= PWR_Regulator;
000044  4302              ORRS     r2,r2,r0
;;;210      /* Store the new value */
;;;211      PWR->CR = tmpreg;
000046  601a              STR      r2,[r3,#0]
;;;212      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;213      SCB->SCR |= SCB_SCR_SLEEPDEEP;
000048  4b21              LDR      r3,|L1.208|
00004a  681b              LDR      r3,[r3,#0]
00004c  f0430304          ORR      r3,r3,#4
000050  f04f24e0          MOV      r4,#0xe000e000
000054  f8c43d10          STR      r3,[r4,#0xd10]
;;;214      
;;;215      /* Select STOP mode entry --------------------------------------------------*/
;;;216      if(PWR_STOPEntry == PWR_STOPEntry_WFI)
000058  2901              CMP      r1,#1
00005a  d101              BNE      |L1.96|
;;;217      {   
;;;218        /* Request Wait For Interrupt */
;;;219        __WFI();
00005c  bf30              WFI      
00005e  e000              B        |L1.98|
                  |L1.96|
;;;220      }
;;;221      else
;;;222      {
;;;223        /* Request Wait For Event */
;;;224        __WFE();
000060  bf20              WFE      
                  |L1.98|
;;;225      }
;;;226      
;;;227      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;228      SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);  
000062  4b1b              LDR      r3,|L1.208|
000064  681b              LDR      r3,[r3,#0]
000066  f0230304          BIC      r3,r3,#4
00006a  f04f24e0          MOV      r4,#0xe000e000
00006e  f8c43d10          STR      r3,[r4,#0xd10]
;;;229    }
000072  bd10              POP      {r4,pc}
;;;230    
                          ENDP

                  PWR_EnterSTANDBYMode PROC
;;;235      */
;;;236    void PWR_EnterSTANDBYMode(void)
000074  4814              LDR      r0,|L1.200|
;;;237    {
;;;238      /* Clear Wake-up flag */
;;;239      PWR->CR |= PWR_CR_CWUF;
000076  6800              LDR      r0,[r0,#0]
000078  f0400004          ORR      r0,r0,#4
00007c  4912              LDR      r1,|L1.200|
00007e  6008              STR      r0,[r1,#0]
;;;240      /* Select STANDBY mode */
;;;241      PWR->CR |= PWR_CR_PDDS;
000080  4608              MOV      r0,r1
000082  6800              LDR      r0,[r0,#0]
000084  f0400002          ORR      r0,r0,#2
000088  6008              STR      r0,[r1,#0]
;;;242      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;243      SCB->SCR |= SCB_SCR_SLEEPDEEP;
00008a  4811              LDR      r0,|L1.208|
00008c  6800              LDR      r0,[r0,#0]
00008e  f0400004          ORR      r0,r0,#4
000092  f04f21e0          MOV      r1,#0xe000e000
000096  f8c10d10          STR      r0,[r1,#0xd10]
;;;244    /* This option is used to ensure that store operations are completed */
;;;245    #if defined ( __CC_ARM   )
;;;246      __force_stores();
00009a  bf00              NOP      
00009c  bf00              NOP      
;;;247    #endif
;;;248      /* Request Wait For Interrupt */
;;;249      __WFI();
00009e  bf30              WFI      
;;;250    }
0000a0  4770              BX       lr
;;;251    
                          ENDP

                  PWR_GetFlagStatus PROC
;;;260      */
;;;261    FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
0000a2  4601              MOV      r1,r0
;;;262    {
;;;263      FlagStatus bitstatus = RESET;
0000a4  2000              MOVS     r0,#0
;;;264      /* Check the parameters */
;;;265      assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
;;;266      
;;;267      if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
0000a6  4a08              LDR      r2,|L1.200|
0000a8  6852              LDR      r2,[r2,#4]
0000aa  420a              TST      r2,r1
0000ac  d001              BEQ      |L1.178|
;;;268      {
;;;269        bitstatus = SET;
0000ae  2001              MOVS     r0,#1
0000b0  e000              B        |L1.180|
                  |L1.178|
;;;270      }
;;;271      else
;;;272      {
;;;273        bitstatus = RESET;
0000b2  2000              MOVS     r0,#0
                  |L1.180|
;;;274      }
;;;275      /* Return the flag status */
;;;276      return bitstatus;
;;;277    }
0000b4  4770              BX       lr
;;;278    
                          ENDP

                  PWR_ClearFlag PROC
;;;286      */
;;;287    void PWR_ClearFlag(uint32_t PWR_FLAG)
0000b6  4904              LDR      r1,|L1.200|
;;;288    {
;;;289      /* Check the parameters */
;;;290      assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
;;;291             
;;;292      PWR->CR |=  PWR_FLAG << 2;
0000b8  6809              LDR      r1,[r1,#0]
0000ba  ea410180          ORR      r1,r1,r0,LSL #2
0000be  4a02              LDR      r2,|L1.200|
0000c0  6011              STR      r1,[r2,#0]
;;;293    }
0000c2  4770              BX       lr
;;;294    
                          ENDP

                  |L1.196|
                          DCD      0x420e0000
                  |L1.200|
                          DCD      0x40007000
                  |L1.204|
                          DCD      0x420e00a0
                  |L1.208|
                          DCD      0xe000ed10
