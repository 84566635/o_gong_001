; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--debug -c --asm --interleave -o.\out\bsp.o --depend=.\out\bsp.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\user\inc -I.\stdperiph_driver\inc -I.\cmsis -ID:\ARM\INC -ID:\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\out\bsp.crf user\src\bsp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  bsp_Init PROC
;;;33     */
;;;34     void bsp_Init(void)
000000  b510              PUSH     {r4,lr}
;;;35     {
;;;36     	/*
;;;37     		由于ST固件库的启动文件已经执行了CPU系统时钟的初始化，所以不必再次重复配置系统时钟。
;;;38     		启动文件配置了CPU主时钟频率、内部Flash访问速度和可选的外部SRAM FSMC初始化。
;;;39     
;;;40     		系统时钟缺省配置为168MHz，如果需要更改，可以修改 system_stm32f4xx.c 文件
;;;41     	*/
;;;42     
;;;43     //	bsp_InitUart(); 	/* 初始化串口 */
;;;44     	bsp_InitKey();		/* 初始化按键变量（必须在 bsp_InitTimer() 之前调用） */
000002  f7fffffe          BL       bsp_InitKey
;;;45     	bsp_InitTimer();	/* 初始化系统滴答定时器 */
000006  f7fffffe          BL       bsp_InitTimer
;;;46     	
;;;47     	bsp_InitLed();
00000a  f7fffffe          BL       bsp_InitLed
;;;48     
;;;49     	/* 针对不同的应用程序，添加需要的底层驱动模块初始化函数 */
;;;50     }
00000e  bd10              POP      {r4,pc}
;;;51     
                          ENDP

                  bsp_RunPer10ms PROC
;;;60     */
;;;61     void bsp_RunPer10ms(void)
000010  b510              PUSH     {r4,lr}
;;;62     {
;;;63     	bsp_KeyScan();		/* 按键扫描 */
000012  f7fffffe          BL       bsp_KeyScan
;;;64     }
000016  bd10              POP      {r4,pc}
;;;65     
                          ENDP

                  bsp_RunPer2s PROC
;;;74     */
;;;75     void bsp_RunPer2s(void)
000018  b510              PUSH     {r4,lr}
;;;76     {
;;;77     	static char per2scond_count = 0;
;;;78     	static char perCO2_count = 0;
;;;79     	static char collect_data_falg = 1,co2_colect_falg = 1;
;;;80     	
;;;81     	Refresh_LCD();
00001a  f7fffffe          BL       Refresh_LCD
;;;82     	if(per2scond_count<7)
00001e  4833              LDR      r0,|L1.236|
000020  7800              LDRB     r0,[r0,#0]  ; per2scond_count
000022  2807              CMP      r0,#7
000024  da05              BGE      |L1.50|
;;;83     	{
;;;84     		per2scond_count++;
000026  4831              LDR      r0,|L1.236|
000028  7800              LDRB     r0,[r0,#0]  ; per2scond_count
00002a  1c40              ADDS     r0,r0,#1
00002c  492f              LDR      r1,|L1.236|
00002e  7008              STRB     r0,[r1,#0]
000030  e008              B        |L1.68|
                  |L1.50|
;;;85     	}
;;;86     	else
;;;87     	{
;;;88     		per2scond_count = 0;
000032  2000              MOVS     r0,#0
000034  492d              LDR      r1,|L1.236|
000036  7008              STRB     r0,[r1,#0]
;;;89     		collect_data_falg ^= 0x01;
000038  1c88              ADDS     r0,r1,#2
00003a  7800              LDRB     r0,[r0,#0]  ; collect_data_falg
00003c  f0800001          EOR      r0,r0,#1
000040  1c89              ADDS     r1,r1,#2
000042  7008              STRB     r0,[r1,#0]
                  |L1.68|
;;;90     	}
;;;91     	if(perCO2_count<2)
000044  4829              LDR      r0,|L1.236|
000046  1c40              ADDS     r0,r0,#1
000048  7800              LDRB     r0,[r0,#0]  ; perCO2_count
00004a  2802              CMP      r0,#2
00004c  da07              BGE      |L1.94|
;;;92     	{
;;;93     		perCO2_count++;
00004e  4827              LDR      r0,|L1.236|
000050  1c40              ADDS     r0,r0,#1
000052  7800              LDRB     r0,[r0,#0]  ; perCO2_count
000054  1c40              ADDS     r0,r0,#1
000056  4925              LDR      r1,|L1.236|
000058  1c49              ADDS     r1,r1,#1
00005a  7008              STRB     r0,[r1,#0]
00005c  e00a              B        |L1.116|
                  |L1.94|
;;;94       }
;;;95     	else
;;;96     	{
;;;97     		co2_colect_falg ^= 0x01;
00005e  4823              LDR      r0,|L1.236|
000060  1cc0              ADDS     r0,r0,#3
000062  7800              LDRB     r0,[r0,#0]  ; co2_colect_falg
000064  f0800001          EOR      r0,r0,#1
000068  4920              LDR      r1,|L1.236|
00006a  1cc9              ADDS     r1,r1,#3
00006c  7008              STRB     r0,[r1,#0]
;;;98     		perCO2_count = 0;
00006e  2000              MOVS     r0,#0
000070  1e89              SUBS     r1,r1,#2
000072  7008              STRB     r0,[r1,#0]
                  |L1.116|
;;;99       }
;;;100    	if((co2_colect_falg)&&(flag_CO_PW==1))
000074  481d              LDR      r0,|L1.236|
000076  1cc0              ADDS     r0,r0,#3
000078  7800              LDRB     r0,[r0,#0]  ; co2_colect_falg
00007a  b128              CBZ      r0,|L1.136|
00007c  481c              LDR      r0,|L1.240|
00007e  7800              LDRB     r0,[r0,#0]  ; flag_CO_PW
000080  2801              CMP      r0,#1
000082  d101              BNE      |L1.136|
;;;101    	{
;;;102    		get_co2_value();
000084  f7fffffe          BL       get_co2_value
                  |L1.136|
;;;103      }
;;;104    	if(collect_data_falg)
000088  4818              LDR      r0,|L1.236|
00008a  1c80              ADDS     r0,r0,#2
00008c  7800              LDRB     r0,[r0,#0]  ; collect_data_falg
00008e  b350              CBZ      r0,|L1.230|
;;;105    	{
;;;106    				switch (per2scond_count)
000090  4816              LDR      r0,|L1.236|
000092  7800              LDRB     r0,[r0,#0]  ; per2scond_count
000094  2807              CMP      r0,#7
000096  d225              BCS      |L1.228|
000098  e8dff000          TBB      [pc,r0]
00009c  040f1011          DCB      0x04,0x0f,0x10,0x11
0000a0  121e1f00          DCB      0x12,0x1e,0x1f,0x00
;;;107    				{
;;;108    					case 0:
;;;109    // 								if(flag_CO_PW==1)
;;;110    // 								{
;;;111    // 									CO2_PW_EN;
;;;112    // 									//if(flag_getCO2_value==0)
;;;113    // 									//get_co2_value();
;;;114    // 								}
;;;115    								if(flag_PM_PW==1)
0000a4  4813              LDR      r0,|L1.244|
0000a6  7800              LDRB     r0,[r0,#0]  ; flag_PM_PW
0000a8  2801              CMP      r0,#1
0000aa  d105              BNE      |L1.184|
;;;116    								{
;;;117    									clear_PM_rec();
0000ac  f7fffffe          BL       clear_PM_rec
;;;118    									PM_PW_EN;
0000b0  f44f5080          MOV      r0,#0x1000
0000b4  4910              LDR      r1,|L1.248|
0000b6  6008              STR      r0,[r1,#0]
                  |L1.184|
;;;119    								}
;;;120    								break;
0000b8  e014              B        |L1.228|
;;;121    					case 1:
;;;122    // 						    if(flag_getCO2_value==0)
;;;123    // 								get_co2_value();
;;;124    								break;
0000ba  e013              B        |L1.228|
;;;125    					case 2:
;;;126    								
;;;127    								break;
0000bc  e012              B        |L1.228|
;;;128    					case 3:
;;;129    // 						    if(flag_getCO2_value==0)
;;;130    // 								get_co2_value();
;;;131    								break;
0000be  e011              B        |L1.228|
;;;132    					case 4:
;;;133    			 			    if(flag_PM_PW==1&&flag_getPM_value==0)
0000c0  480c              LDR      r0,|L1.244|
0000c2  7800              LDRB     r0,[r0,#0]  ; flag_PM_PW
0000c4  2801              CMP      r0,#1
0000c6  d106              BNE      |L1.214|
0000c8  480c              LDR      r0,|L1.252|
0000ca  7800              LDRB     r0,[r0,#0]  ; flag_getPM_value
0000cc  b918              CBNZ     r0,|L1.214|
;;;134    			 					{
;;;135    			 			      USART_Cmd(USART2,ENABLE);
0000ce  2101              MOVS     r1,#1
0000d0  480b              LDR      r0,|L1.256|
0000d2  f7fffffe          BL       USART_Cmd
                  |L1.214|
;;;136    			 					}
;;;137    								break;
0000d6  e005              B        |L1.228|
;;;138    					case 5:
;;;139    // 						    if(flag_getCO2_value==0)
;;;140    // 								get_co2_value();
;;;141    								break;
0000d8  e004              B        |L1.228|
;;;142    					case 6:
;;;143    						    //CO2_PW_DISABLE;
;;;144    								PM_PW_DISABLE;
0000da  f44f5080          MOV      r0,#0x1000
0000de  4909              LDR      r1,|L1.260|
0000e0  6008              STR      r0,[r1,#0]
;;;145    								break;
0000e2  bf00              NOP      
                  |L1.228|
0000e4  bf00              NOP                            ;120
                  |L1.230|
;;;146    				}
;;;147      }
;;;148    
;;;149    }
0000e6  bd10              POP      {r4,pc}
;;;150    /*
                          ENDP

                  bsp_RunPer1ms PROC
;;;158    */
;;;159    void bsp_RunPer1ms(void)
0000e8  4770              BX       lr
;;;160    {
;;;161    	//TOUCH_Scan();	/* 触摸扫描 */
;;;162    }
;;;163    
                          ENDP

                  bsp_Idle PROC
;;;172    */
;;;173    void bsp_Idle(void)
0000ea  4770              BX       lr
;;;174    {
;;;175    	/* --- 喂狗 */
;;;176    
;;;177    	/* --- 让CPU进入休眠，由Systick定时中断唤醒或者其他中断唤醒 */
;;;178    
;;;179    	/* 对于 emWin 图形库，可以插入图形库需要的轮询函数 */
;;;180    	//GUI_Exec();
;;;181    
;;;182    	/* 对于 uIP 协议实现，可以插入uip轮询函数 */
;;;183    }
;;;184    
                          ENDP

                  |L1.236|
                          DCD      ||.data||
                  |L1.240|
                          DCD      flag_CO_PW
                  |L1.244|
                          DCD      flag_PM_PW
                  |L1.248|
                          DCD      0x40010810
                  |L1.252|
                          DCD      flag_getPM_value
                  |L1.256|
                          DCD      0x40004400
                  |L1.260|
                          DCD      0x40010814

                          AREA ||.data||, DATA, ALIGN=0

                  per2scond_count
000000  00                DCB      0x00
                  perCO2_count
000001  00                DCB      0x00
                  collect_data_falg
000002  01                DCB      0x01
                  co2_colect_falg
000003  01                DCB      0x01
