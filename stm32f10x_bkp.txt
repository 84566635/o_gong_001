; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--debug -c --asm --interleave -ostm32f10x_bkp.o --depend=stm32f10x_bkp.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\user\inc -I.\stdperiph_driver\inc -I.\cmsis -ID:\ARM\INC -ID:\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=stm32f10x_bkp.crf stdperiph_driver\src\stm32f10x_bkp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  BKP_DeInit PROC
;;;119      */
;;;120    void BKP_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;121    {
;;;122      RCC_BackupResetCmd(ENABLE);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       RCC_BackupResetCmd
;;;123      RCC_BackupResetCmd(DISABLE);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       RCC_BackupResetCmd
;;;124    }
00000e  bd10              POP      {r4,pc}
;;;125    
                          ENDP

                  BKP_TamperPinLevelConfig PROC
;;;133      */
;;;134    void BKP_TamperPinLevelConfig(uint16_t BKP_TamperPinLevel)
000010  4923              LDR      r1,|L1.160|
;;;135    {
;;;136      /* Check the parameters */
;;;137      assert_param(IS_BKP_TAMPER_PIN_LEVEL(BKP_TamperPinLevel));
;;;138      *(__IO uint32_t *) CR_TPAL_BB = BKP_TamperPinLevel;
000012  6008              STR      r0,[r1,#0]
;;;139    }
000014  4770              BX       lr
;;;140    
                          ENDP

                  BKP_TamperPinCmd PROC
;;;146      */
;;;147    void BKP_TamperPinCmd(FunctionalState NewState)
000016  4923              LDR      r1,|L1.164|
;;;148    {
;;;149      /* Check the parameters */
;;;150      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;151      *(__IO uint32_t *) CR_TPE_BB = (uint32_t)NewState;
000018  6008              STR      r0,[r1,#0]
;;;152    }
00001a  4770              BX       lr
;;;153    
                          ENDP

                  BKP_ITConfig PROC
;;;159      */
;;;160    void BKP_ITConfig(FunctionalState NewState)
00001c  4922              LDR      r1,|L1.168|
;;;161    {
;;;162      /* Check the parameters */
;;;163      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;164      *(__IO uint32_t *) CSR_TPIE_BB = (uint32_t)NewState;
00001e  6008              STR      r0,[r1,#0]
;;;165    }
000020  4770              BX       lr
;;;166    
                          ENDP

                  BKP_RTCOutputConfig PROC
;;;179      */
;;;180    void BKP_RTCOutputConfig(uint16_t BKP_RTCOutputSource)
000022  2100              MOVS     r1,#0
;;;181    {
;;;182      uint16_t tmpreg = 0;
;;;183      /* Check the parameters */
;;;184      assert_param(IS_BKP_RTC_OUTPUT_SOURCE(BKP_RTCOutputSource));
;;;185      tmpreg = BKP->RTCCR;
000024  4a21              LDR      r2,|L1.172|
000026  8811              LDRH     r1,[r2,#0]
;;;186      /* Clear CCO, ASOE and ASOS bits */
;;;187      tmpreg &= RTCCR_MASK;
000028  f64f427f          MOV      r2,#0xfc7f
00002c  ea010102          AND      r1,r1,r2
;;;188      
;;;189      /* Set CCO, ASOE and ASOS bits according to BKP_RTCOutputSource value */
;;;190      tmpreg |= BKP_RTCOutputSource;
000030  ea410100          ORR      r1,r1,r0
;;;191      /* Store the new value */
;;;192      BKP->RTCCR = tmpreg;
000034  4a1e              LDR      r2,|L1.176|
000036  f8a21c2c          STRH     r1,[r2,#0xc2c]
;;;193    }
00003a  4770              BX       lr
;;;194    
                          ENDP

                  BKP_SetRTCCalibrationValue PROC
;;;200      */
;;;201    void BKP_SetRTCCalibrationValue(uint8_t CalibrationValue)
00003c  2100              MOVS     r1,#0
;;;202    {
;;;203      uint16_t tmpreg = 0;
;;;204      /* Check the parameters */
;;;205      assert_param(IS_BKP_CALIBRATION_VALUE(CalibrationValue));
;;;206      tmpreg = BKP->RTCCR;
00003e  4a1b              LDR      r2,|L1.172|
000040  8811              LDRH     r1,[r2,#0]
;;;207      /* Clear CAL[6:0] bits */
;;;208      tmpreg &= RTCCR_CAL_MASK;
000042  f64f7280          MOV      r2,#0xff80
000046  ea010102          AND      r1,r1,r2
;;;209      /* Set CAL[6:0] bits according to CalibrationValue value */
;;;210      tmpreg |= CalibrationValue;
00004a  ea410100          ORR      r1,r1,r0
;;;211      /* Store the new value */
;;;212      BKP->RTCCR = tmpreg;
00004e  4a18              LDR      r2,|L1.176|
000050  f8a21c2c          STRH     r1,[r2,#0xc2c]
;;;213    }
000054  4770              BX       lr
;;;214    
                          ENDP

                  BKP_WriteBackupRegister PROC
;;;221      */
;;;222    void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data)
000056  2200              MOVS     r2,#0
;;;223    {
;;;224      __IO uint32_t tmp = 0;
;;;225    
;;;226      /* Check the parameters */
;;;227      assert_param(IS_BKP_DR(BKP_DR));
;;;228    
;;;229      tmp = (uint32_t)BKP_BASE; 
000058  4a14              LDR      r2,|L1.172|
00005a  3a2c              SUBS     r2,r2,#0x2c
;;;230      tmp += BKP_DR;
00005c  4402              ADD      r2,r2,r0
;;;231    
;;;232      *(__IO uint32_t *) tmp = Data;
00005e  6011              STR      r1,[r2,#0]
;;;233    }
000060  4770              BX       lr
;;;234    
                          ENDP

                  BKP_ReadBackupRegister PROC
;;;240      */
;;;241    uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR)
000062  4602              MOV      r2,r0
;;;242    {
;;;243      __IO uint32_t tmp = 0;
000064  2100              MOVS     r1,#0
;;;244    
;;;245      /* Check the parameters */
;;;246      assert_param(IS_BKP_DR(BKP_DR));
;;;247    
;;;248      tmp = (uint32_t)BKP_BASE; 
000066  4911              LDR      r1,|L1.172|
000068  392c              SUBS     r1,r1,#0x2c
;;;249      tmp += BKP_DR;
00006a  4411              ADD      r1,r1,r2
;;;250    
;;;251      return (*(__IO uint16_t *) tmp);
00006c  8808              LDRH     r0,[r1,#0]
;;;252    }
00006e  4770              BX       lr
;;;253    
                          ENDP

                  BKP_GetFlagStatus PROC
;;;258      */
;;;259    FlagStatus BKP_GetFlagStatus(void)
000070  4810              LDR      r0,|L1.180|
;;;260    {
;;;261      return (FlagStatus)(*(__IO uint32_t *) CSR_TEF_BB);
000072  6800              LDR      r0,[r0,#0]
000074  b2c0              UXTB     r0,r0
;;;262    }
000076  4770              BX       lr
;;;263    
                          ENDP

                  BKP_ClearFlag PROC
;;;268      */
;;;269    void BKP_ClearFlag(void)
000078  480f              LDR      r0,|L1.184|
;;;270    {
;;;271      /* Set CTE bit to clear Tamper Pin Event flag */
;;;272      BKP->CSR |= BKP_CSR_CTE;
00007a  8800              LDRH     r0,[r0,#0]
00007c  f0400001          ORR      r0,r0,#1
000080  490b              LDR      r1,|L1.176|
000082  f8a10c34          STRH     r0,[r1,#0xc34]
;;;273    }
000086  4770              BX       lr
;;;274    
                          ENDP

                  BKP_GetITStatus PROC
;;;279      */
;;;280    ITStatus BKP_GetITStatus(void)
000088  480c              LDR      r0,|L1.188|
;;;281    {
;;;282      return (ITStatus)(*(__IO uint32_t *) CSR_TIF_BB);
00008a  6800              LDR      r0,[r0,#0]
00008c  b2c0              UXTB     r0,r0
;;;283    }
00008e  4770              BX       lr
;;;284    
                          ENDP

                  BKP_ClearITPendingBit PROC
;;;289      */
;;;290    void BKP_ClearITPendingBit(void)
000090  4809              LDR      r0,|L1.184|
;;;291    {
;;;292      /* Set CTI bit to clear Tamper Pin Interrupt pending bit */
;;;293      BKP->CSR |= BKP_CSR_CTI;
000092  8800              LDRH     r0,[r0,#0]
000094  f0400002          ORR      r0,r0,#2
000098  4905              LDR      r1,|L1.176|
00009a  f8a10c34          STRH     r0,[r1,#0xc34]
;;;294    }
00009e  4770              BX       lr
;;;295    
                          ENDP

                  |L1.160|
                          DCD      0x420d8604
                  |L1.164|
                          DCD      0x420d8600
                  |L1.168|
                          DCD      0x420d8688
                  |L1.172|
                          DCD      0x40006c2c
                  |L1.176|
                          DCD      0x40006000
                  |L1.180|
                          DCD      0x420d86a0
                  |L1.184|
                          DCD      0x40006c34
                  |L1.188|
                          DCD      0x420d86a4
