; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--debug -c --asm --interleave -osys.o --depend=sys.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\user\inc -I.\stdperiph_driver\inc -I.\cmsis -ID:\ARM\INC -ID:\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=sys.crf user\src\sys.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  ||sys|| PROC
;;;5      vu32 test_time;
;;;6      void sys(void)
000000  b510              PUSH     {r4,lr}
;;;7      {
;;;8      		volatile ErrorStatus HSEStartUpStatus; 
;;;9      		RCC_DeInit();
000002  f7fffffe          BL       RCC_DeInit
;;;10     
;;;11     	  RCC_HSEConfig(RCC_HSE_OFF);
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       RCC_HSEConfig
;;;12      		HSEStartUpStatus = RCC_WaitForHSEStartUp(); 
00000c  f7fffffe          BL       RCC_WaitForHSEStartUp
000010  4604              MOV      r4,r0
;;;13     	  RCC_HSICmd(ENABLE);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       RCC_HSICmd
;;;14     		RCC_PLLConfig(RCC_PLLSource_HSI_Div2, RCC_PLLMul_16);
000018  f44f1160          MOV      r1,#0x380000
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       RCC_PLLConfig
;;;15     		RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
000022  2002              MOVS     r0,#2
000024  f7fffffe          BL       RCC_SYSCLKConfig
;;;16     		RCC_HCLKConfig(RCC_SYSCLK_Div1);
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       RCC_HCLKConfig
;;;17     		RCC_PCLK1Config(RCC_HCLK_Div2);
00002e  f44f6080          MOV      r0,#0x400
000032  f7fffffe          BL       RCC_PCLK1Config
;;;18     		RCC_PCLK2Config(RCC_HCLK_Div1);
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       RCC_PCLK2Config
;;;19     	  RCC_ADCCLKConfig(RCC_PCLK2_Div6);
00003c  f44f4000          MOV      r0,#0x8000
000040  f7fffffe          BL       RCC_ADCCLKConfig
;;;20     		FLASH_SetLatency(FLASH_Latency_2);
000044  2002              MOVS     r0,#2
000046  f7fffffe          BL       FLASH_SetLatency
;;;21     		FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
00004a  2010              MOVS     r0,#0x10
00004c  f7fffffe          BL       FLASH_PrefetchBufferCmd
;;;22     
;;;23     		RCC_PLLCmd(ENABLE);
000050  2001              MOVS     r0,#1
000052  f7fffffe          BL       RCC_PLLCmd
;;;24     		while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY)==RESET);
000056  bf00              NOP      
                  |L1.88|
000058  2039              MOVS     r0,#0x39
00005a  f7fffffe          BL       RCC_GetFlagStatus
00005e  2800              CMP      r0,#0
000060  d0fa              BEQ      |L1.88|
;;;25     		while(RCC_GetSYSCLKSource() != 0x08);
000062  bf00              NOP      
                  |L1.100|
000064  f7fffffe          BL       RCC_GetSYSCLKSource
000068  2808              CMP      r0,#8
00006a  d1fb              BNE      |L1.100|
;;;26     		RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);//DMA
00006c  2101              MOVS     r1,#1
00006e  4608              MOV      r0,r1
000070  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;27     		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);//模拟spi
000074  2101              MOVS     r1,#1
000076  2004              MOVS     r0,#4
000078  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;28     		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC,ENABLE);
00007c  2101              MOVS     r1,#1
00007e  2010              MOVS     r0,#0x10
000080  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;29      		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD,ENABLE);
000084  2101              MOVS     r1,#1
000086  2020              MOVS     r0,#0x20
000088  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;30     		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);
00008c  2101              MOVS     r1,#1
00008e  2008              MOVS     r0,#8
000090  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;31      		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);
000094  2101              MOVS     r1,#1
000096  2002              MOVS     r0,#2
000098  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;32     		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);//使能定时器
00009c  2101              MOVS     r1,#1
00009e  4608              MOV      r0,r1
0000a0  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;33         RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1,ENABLE);//使能定时器
0000a4  2101              MOVS     r1,#1
0000a6  02c8              LSLS     r0,r1,#11
0000a8  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;34      		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);
0000ac  2101              MOVS     r1,#1
0000ae  0388              LSLS     r0,r1,#14
0000b0  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;35      		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
0000b4  2101              MOVS     r1,#1
0000b6  0448              LSLS     r0,r1,#17
0000b8  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;36         RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);
0000bc  2101              MOVS     r1,#1
0000be  4608              MOV      r0,r1
0000c0  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;37     		
;;;38     		PWR_BackupAccessCmd(ENABLE);//????RTC ??????
0000c4  2001              MOVS     r0,#1
0000c6  f7fffffe          BL       PWR_BackupAccessCmd
;;;39         RCC_LSEConfig(RCC_LSE_OFF);//?????????????? ?,PC13 PC14 PC15 ??????IO??
0000ca  2000              MOVS     r0,#0
0000cc  f7fffffe          BL       RCC_LSEConfig
;;;40         PWR_BackupAccessCmd(DISABLE);//?????????
0000d0  2000              MOVS     r0,#0
0000d2  f7fffffe          BL       PWR_BackupAccessCmd
;;;41     }                    
0000d6  bd10              POP      {r4,pc}
;;;42     
                          ENDP

                  delay_us PROC
;;;43     
;;;44     void delay_us(int usneed)
0000d8  2200              MOVS     r2,#0
;;;45     {
;;;46     	int i,j;
;;;47     	 	for (i=0;i<usneed;i++)
0000da  e005              B        |L1.232|
                  |L1.220|
;;;48      	    for(j=0;j<1;j++);//72MHZ is 10284 times,becaus,1/72MHZ = 13.89,1000/13.89=71994,72/7 = 10;
0000dc  2100              MOVS     r1,#0
0000de  e000              B        |L1.226|
                  |L1.224|
0000e0  1c49              ADDS     r1,r1,#1
                  |L1.226|
0000e2  2901              CMP      r1,#1
0000e4  dbfc              BLT      |L1.224|
0000e6  1c52              ADDS     r2,r2,#1              ;47
                  |L1.232|
0000e8  4282              CMP      r2,r0                 ;47
0000ea  dbf7              BLT      |L1.220|
;;;49     }
0000ec  4770              BX       lr
;;;50     
                          ENDP

                  delay_ms PROC
;;;51     void delay_ms(int msneed)
0000ee  2200              MOVS     r2,#0
;;;52     {
;;;53      	int i,j;
;;;54     
;;;55      	for (i=0;i<msneed;i++)
0000f0  e007              B        |L1.258|
                  |L1.242|
;;;56      	    for(j=0;j<10284;j++);//72MHZ is 10284 times,becaus,1/72MHZ = 13.89,1000000/13.89=71994,71994/7 = 10284;
0000f2  2100              MOVS     r1,#0
0000f4  e000              B        |L1.248|
                  |L1.246|
0000f6  1c49              ADDS     r1,r1,#1
                  |L1.248|
0000f8  f642032c          MOV      r3,#0x282c
0000fc  4299              CMP      r1,r3
0000fe  dbfa              BLT      |L1.246|
000100  1c52              ADDS     r2,r2,#1              ;55
                  |L1.258|
000102  4282              CMP      r2,r0                 ;55
000104  dbf5              BLT      |L1.242|
;;;57     	
;;;58     }
000106  4770              BX       lr
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  test_time
                          DCD      0x00000000
