; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--debug -c --asm --interleave -ostm32f10x_it.o --depend=stm32f10x_it.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\user\inc -I.\stdperiph_driver\inc -I.\cmsis -ID:\ARM\INC -ID:\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=stm32f10x_it.crf user\src\stm32f10x_it.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NMI_Handler PROC
;;;40     	
;;;41     void NMI_Handler(void)
000000  4770              BX       lr
;;;42     {
;;;43     }
;;;44     
                          ENDP

                  HardFault_Handler PROC
;;;49       */
;;;50     void HardFault_Handler(void)
000002  bf00              NOP      
                  |L1.4|
;;;51     {
;;;52       /* Go to infinite loop when Hard Fault exception occurs */
;;;53       while (1)
000004  e7fe              B        |L1.4|
;;;54       {
;;;55     		//DisAllPWMout();
;;;56     //		Update_DutyCycle(200);
;;;57       }
;;;58     }
;;;59     
                          ENDP

                  MemManage_Handler PROC
;;;64       */
;;;65     void MemManage_Handler(void)
000006  bf00              NOP      
                  |L1.8|
;;;66     {
;;;67       /* Go to infinite loop when Memory Manage exception occurs */
;;;68       while (1)
000008  e7fe              B        |L1.8|
;;;69       {
;;;70       }
;;;71     }
;;;72     
                          ENDP

                  BusFault_Handler PROC
;;;77       */
;;;78     void BusFault_Handler(void)
00000a  bf00              NOP      
                  |L1.12|
;;;79     {
;;;80       /* Go to infinite loop when Bus Fault exception occurs */
;;;81       while (1)
00000c  e7fe              B        |L1.12|
;;;82       {
;;;83       }
;;;84     }
;;;85     
                          ENDP

                  UsageFault_Handler PROC
;;;90       */
;;;91     void UsageFault_Handler(void)
00000e  bf00              NOP      
                  |L1.16|
;;;92     {
;;;93       /* Go to infinite loop when Usage Fault exception occurs */
;;;94       while (1)
000010  e7fe              B        |L1.16|
;;;95       {
;;;96       }
;;;97     }
;;;98     
                          ENDP

                  SVC_Handler PROC
;;;103      */
;;;104    void SVC_Handler(void)
000012  4770              BX       lr
;;;105    {
;;;106    }
;;;107    
                          ENDP

                  DebugMon_Handler PROC
;;;112      */
;;;113    void DebugMon_Handler(void)
000014  4770              BX       lr
;;;114    {
;;;115    }
;;;116    
                          ENDP

                  PendSV_Handler PROC
;;;121      */
;;;122    void PendSV_Handler(void)
000016  4770              BX       lr
;;;123    {
;;;124    }
;;;125    
                          ENDP

                  DMA1_Channel6_IRQHandler PROC
;;;155    /*****************usart2 rx****************/
;;;156    void DMA1_Channel6_IRQHandler(void)
000018  b510              PUSH     {r4,lr}
;;;157    {
;;;158    	
;;;159    	flag_getPM_value = 1;
00001a  2001              MOVS     r0,#1
00001c  4944              LDR      r1,|L1.304|
00001e  7008              STRB     r0,[r1,#0]
;;;160    	//PM_PW_DISABLE;
;;;161    	USART_Cmd(USART2,DISABLE);
000020  2100              MOVS     r1,#0
000022  4844              LDR      r0,|L1.308|
000024  f7fffffe          BL       USART_Cmd
;;;162    	DMA_ClearITPendingBit(DMA1_IT_TC6);
000028  f44f1000          MOV      r0,#0x200000
00002c  f7fffffe          BL       DMA_ClearITPendingBit
;;;163    	
;;;164    }
000030  bd10              POP      {r4,pc}
;;;165    
                          ENDP

                  USART1_IRQHandler PROC
;;;190    ///////////////////////////////////////////////
;;;191    void USART1_IRQHandler(void)
000032  b510              PUSH     {r4,lr}
;;;192    {
;;;193     
;;;194     if((USART_GetITStatus(USART1, USART_IT_RXNE)!= RESET ))
000034  f2405125          MOV      r1,#0x525
000038  483f              LDR      r0,|L1.312|
00003a  f7fffffe          BL       USART_GetITStatus
00003e  b318              CBZ      r0,|L1.136|
;;;195     {
;;;196    	 if(flag_getCO2_value == 0)
000040  483e              LDR      r0,|L1.316|
000042  7800              LDRB     r0,[r0,#0]  ; flag_getCO2_value
000044  b9d8              CBNZ     r0,|L1.126|
;;;197    	 {
;;;198    		// if(usart_rec_count<8)
;;;199    		 {
;;;200    			 usart_CO2_rec_temp[usart_rec_count] = (uint8_t)(USART_ReceiveData(USART1));
000046  483c              LDR      r0,|L1.312|
000048  f7fffffe          BL       USART_ReceiveData
00004c  493c              LDR      r1,|L1.320|
00004e  4a3d              LDR      r2,|L1.324|
000050  7812              LDRB     r2,[r2,#0]  ; usart_rec_count
000052  5488              STRB     r0,[r1,r2]
;;;201    			 usart_rec_count++;
000054  483b              LDR      r0,|L1.324|
000056  7800              LDRB     r0,[r0,#0]  ; usart_rec_count
000058  1c40              ADDS     r0,r0,#1
00005a  493a              LDR      r1,|L1.324|
00005c  7008              STRB     r0,[r1,#0]
;;;202    		 }
;;;203    		 TIM2->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
00005e  f04f4080          MOV      r0,#0x40000000
000062  8800              LDRH     r0,[r0,#0]
000064  f64f71fe          MOV      r1,#0xfffe
000068  4008              ANDS     r0,r0,r1
00006a  f04f4180          MOV      r1,#0x40000000
00006e  8008              STRH     r0,[r1,#0]
;;;204    		 TIM2->CNT = 0;
000070  2000              MOVS     r0,#0
000072  8488              STRH     r0,[r1,#0x24]
;;;205    		 TIM2->CR1 |= TIM_CR1_CEN;
000074  4608              MOV      r0,r1
000076  8800              LDRH     r0,[r0,#0]
000078  f0400001          ORR      r0,r0,#1
00007c  8008              STRH     r0,[r1,#0]
                  |L1.126|
;;;206    // 		 else if(usart_rec_count==8)
;;;207    // 		 {
;;;208    // 			 usart_rec_count = 0;
;;;209    // 			 usart_CO2_rec_temp[8] = (uint8_t)USART_ReceiveData(USART1);
;;;210    // 			 flag_getCO2_value = 1;
;;;211    // 		 }
;;;212    	 }
;;;213    	 USART_ClearITPendingBit(USART1, USART_IT_RXNE);
00007e  f2405125          MOV      r1,#0x525
000082  482d              LDR      r0,|L1.312|
000084  f7fffffe          BL       USART_ClearITPendingBit
                  |L1.136|
;;;214     }
;;;215    }
000088  bd10              POP      {r4,pc}
;;;216    
                          ENDP

                  TIM2_IRQHandler PROC
;;;217    void TIM2_IRQHandler(void)
00008a  b510              PUSH     {r4,lr}
;;;218    {		
;;;219       if(TIM_GetITStatus(TIM2,TIM_IT_Update)!= RESET)
00008c  2101              MOVS     r1,#1
00008e  0788              LSLS     r0,r1,#30
000090  f7fffffe          BL       TIM_GetITStatus
000094  b198              CBZ      r0,|L1.190|
;;;220    	 {
;;;221    	 		 usart_rec_count = 0;
000096  2000              MOVS     r0,#0
000098  492a              LDR      r1,|L1.324|
00009a  7008              STRB     r0,[r1,#0]
;;;222    			 flag_getCO2_value = 1;
00009c  2001              MOVS     r0,#1
00009e  4927              LDR      r1,|L1.316|
0000a0  7008              STRB     r0,[r1,#0]
;;;223    		   TIM2->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
0000a2  0780              LSLS     r0,r0,#30
0000a4  8800              LDRH     r0,[r0,#0]
0000a6  f64f71fe          MOV      r1,#0xfffe
0000aa  4008              ANDS     r0,r0,r1
0000ac  f04f4180          MOV      r1,#0x40000000
0000b0  8008              STRH     r0,[r1,#0]
;;;224    		   TIM2->CNT = 0;
0000b2  2000              MOVS     r0,#0
0000b4  8488              STRH     r0,[r1,#0x24]
;;;225    		   TIM_ClearITPendingBit(TIM2,TIM_IT_Update);
0000b6  2101              MOVS     r1,#1
0000b8  0788              LSLS     r0,r1,#30
0000ba  f7fffffe          BL       TIM_ClearITPendingBit
                  |L1.190|
;;;226       }
;;;227    }
0000be  bd10              POP      {r4,pc}
;;;228    
                          ENDP

                  USART2_IRQHandler PROC
;;;229    //////////////////////////////////////////////////
;;;230     void USART2_IRQHandler(void)
0000c0  b510              PUSH     {r4,lr}
;;;231     {
;;;232      
;;;233      if((USART_GetITStatus(USART2, USART_IT_RXNE)!= RESET ))
0000c2  f2405125          MOV      r1,#0x525
0000c6  481b              LDR      r0,|L1.308|
0000c8  f7fffffe          BL       USART_GetITStatus
0000cc  b1c0              CBZ      r0,|L1.256|
;;;234      {
;;;235    
;;;236    		if (usart2_count<16)
0000ce  481e              LDR      r0,|L1.328|
0000d0  7800              LDRB     r0,[r0,#0]  ; usart2_count
0000d2  2810              CMP      r0,#0x10
0000d4  da05              BGE      |L1.226|
;;;237    		{
;;;238    			usart2_count++;
0000d6  481c              LDR      r0,|L1.328|
0000d8  7800              LDRB     r0,[r0,#0]  ; usart2_count
0000da  1c40              ADDS     r0,r0,#1
0000dc  491a              LDR      r1,|L1.328|
0000de  7008              STRB     r0,[r1,#0]
0000e0  e002              B        |L1.232|
                  |L1.226|
;;;239        }
;;;240    		else
;;;241    		{
;;;242    			usart2_count = 0;
0000e2  2000              MOVS     r0,#0
0000e4  4918              LDR      r1,|L1.328|
0000e6  7008              STRB     r0,[r1,#0]
                  |L1.232|
;;;243        }
;;;244    		PM25DMABuffer[usart2_count] = USART_ReceiveData(USART2);
0000e8  4812              LDR      r0,|L1.308|
0000ea  f7fffffe          BL       USART_ReceiveData
0000ee  4917              LDR      r1,|L1.332|
0000f0  4a15              LDR      r2,|L1.328|
0000f2  7812              LDRB     r2,[r2,#0]  ; usart2_count
0000f4  5488              STRB     r0,[r1,r2]
;;;245     	 USART_ClearITPendingBit(USART2, USART_IT_RXNE);
0000f6  f2405125          MOV      r1,#0x525
0000fa  480e              LDR      r0,|L1.308|
0000fc  f7fffffe          BL       USART_ClearITPendingBit
                  |L1.256|
;;;246      }
;;;247     }
000100  bd10              POP      {r4,pc}
;;;248    
                          ENDP

                  USART3_IRQHandler PROC
;;;257    *******************************************************************************/
;;;258    void USART3_IRQHandler(void)
000102  4770              BX       lr
;;;259    {
;;;260     
;;;261     
;;;262    }
;;;263    
                          ENDP

                  TIM1_BRK_IRQHandler PROC
;;;264    
;;;265    void TIM1_BRK_IRQHandler(void)
000104  b510              PUSH     {r4,lr}
;;;266    {
;;;267     if(TIM_GetITStatus(TIM1, TIM_IT_Break)!= RESET)
000106  2180              MOVS     r1,#0x80
000108  4811              LDR      r0,|L1.336|
00010a  f7fffffe          BL       TIM_GetITStatus
00010e  b118              CBZ      r0,|L1.280|
;;;268     {
;;;269    
;;;270    
;;;271    	  TIM_ClearITPendingBit(TIM1, TIM_IT_Break);
000110  2180              MOVS     r1,#0x80
000112  480f              LDR      r0,|L1.336|
000114  f7fffffe          BL       TIM_ClearITPendingBit
                  |L1.280|
;;;272     }
;;;273    }
000118  bd10              POP      {r4,pc}
;;;274    
                          ENDP

                  TIM1_UP_IRQHandler PROC
;;;275    void TIM1_UP_IRQHandler(void)
00011a  b510              PUSH     {r4,lr}
;;;276    {
;;;277     if(TIM_GetITStatus(TIM1, TIM_IT_Update)!= RESET);
00011c  2101              MOVS     r1,#1
00011e  480c              LDR      r0,|L1.336|
000120  f7fffffe          BL       TIM_GetITStatus
;;;278     TIM_ClearITPendingBit(TIM1, TIM_IT_Update);
000124  2101              MOVS     r1,#1
000126  480a              LDR      r0,|L1.336|
000128  f7fffffe          BL       TIM_ClearITPendingBit
;;;279    }
00012c  bd10              POP      {r4,pc}
;;;280    
                          ENDP

00012e  0000              DCW      0x0000
                  |L1.304|
                          DCD      flag_getPM_value
                  |L1.308|
                          DCD      0x40004400
                  |L1.312|
                          DCD      0x40013800
                  |L1.316|
                          DCD      flag_getCO2_value
                  |L1.320|
                          DCD      usart_CO2_rec_temp
                  |L1.324|
                          DCD      usart_rec_count
                  |L1.328|
                          DCD      usart2_count
                  |L1.332|
                          DCD      PM25DMABuffer
                  |L1.336|
                          DCD      0x40012c00

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  usart_CO2_rec_temp
                          %        20

                          AREA ||.data||, DATA, ALIGN=0

                  usart_rec_count
000000  00                DCB      0x00
                  flag_getCO2_value
000001  00                DCB      0x00
                  flag_getPM_value
000002  00                DCB      0x00
                  usart2_count
000003  00                DCB      0x00
