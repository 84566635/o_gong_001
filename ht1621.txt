; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--debug -c --asm --interleave -oht1621.o --depend=ht1621.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\user\inc -I.\stdperiph_driver\inc -I.\cmsis -ID:\ARM\INC -ID:\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=ht1621.crf user\src\HT1621.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Ht1621Wr_Data PROC
;;;37     //-----------------------------------------------------------------------------------------
;;;38     void Ht1621Wr_Data(uchar Data,uchar cnt) 
000000  b570              PUSH     {r4-r6,lr}
;;;39      { 
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;40      uchar i; 
;;;41      for (i=0;i<cnt;i++)
000006  2500              MOVS     r5,#0
000008  e020              B        |L1.76|
                  |L1.10|
;;;42        { 
;;;43        WR_1621_L;   //HT1621_WR=0; 
00000a  2040              MOVS     r0,#0x40
00000c  4988              LDR      r1,|L1.560|
00000e  6008              STR      r0,[r1,#0]
;;;44        Delay_uS(10);
000010  f04f000a          MOV      r0,#0xa
000014  f7fffffe          BL       delay_us
;;;45        if((Data & 0x80)==0x80)
000018  f0040080          AND      r0,r4,#0x80
00001c  2880              CMP      r0,#0x80
00001e  d102              BNE      |L1.38|
;;;46          {
;;;47          DATA_1621_H; //HT1621_DAT=1;
000020  4984              LDR      r1,|L1.564|
000022  6008              STR      r0,[r1,#0]
000024  e002              B        |L1.44|
                  |L1.38|
;;;48          }
;;;49          else
;;;50          {
;;;51          DATA_1621_L; //HT1621_DAT=0;
000026  2080              MOVS     r0,#0x80
000028  4981              LDR      r1,|L1.560|
00002a  6008              STR      r0,[r1,#0]
                  |L1.44|
;;;52          };
;;;53        Delay_uS(10);
00002c  200a              MOVS     r0,#0xa
00002e  f7fffffe          BL       delay_us
;;;54        WR_1621_H;   //HT1621_WR=1; 
000032  2040              MOVS     r0,#0x40
000034  497f              LDR      r1,|L1.564|
000036  6008              STR      r0,[r1,#0]
;;;55        Data<<=1;    
000038  ea4f6044          LSL      r0,r4,#25
00003c  ea4f6410          LSR      r4,r0,#24
;;;56        Delay_uS(10);
000040  f04f000a          MOV      r0,#0xa
000044  f7fffffe          BL       delay_us
000048  1c68              ADDS     r0,r5,#1              ;41
00004a  b2c5              UXTB     r5,r0                 ;41
                  |L1.76|
00004c  42b5              CMP      r5,r6                 ;41
00004e  dbdc              BLT      |L1.10|
;;;57        }; 
;;;58      }
000050  bd70              POP      {r4-r6,pc}
;;;59     
                          ENDP

                  Ht1621WrOneData PROC
;;;69     //-----------------------------------------------------------------------------------------
;;;70     void Ht1621WrOneData(uchar Addr,uchar Data) 
000052  b570              PUSH     {r4-r6,lr}
;;;71      { 
000054  4604              MOV      r4,r0
000056  460d              MOV      r5,r1
;;;72      CS_1621_L;                   //HT1621_CS=0; 
000058  2010              MOVS     r0,#0x10
00005a  4975              LDR      r1,|L1.560|
00005c  6008              STR      r0,[r1,#0]
;;;73      Ht1621Wr_Data(WRITE_MODE,3); //写入数据标志101 
00005e  f04f0103          MOV      r1,#3
000062  f04f00a0          MOV      r0,#0xa0
000066  f7fffffe          BL       Ht1621Wr_Data
;;;74      Ht1621Wr_Data(Addr<<2,6);    //写入地址数据 
00006a  06a1              LSLS     r1,r4,#26
00006c  0e08              LSRS     r0,r1,#24
00006e  2106              MOVS     r1,#6
000070  f7fffffe          BL       Ht1621Wr_Data
;;;75      Ht1621Wr_Data(Data<<4,4);    //写入数据 
000074  0729              LSLS     r1,r5,#28
000076  0e08              LSRS     r0,r1,#24
000078  2104              MOVS     r1,#4
00007a  f7fffffe          BL       Ht1621Wr_Data
;;;76      CS_1621_H;                   //HT1621_CS=1; 
00007e  2010              MOVS     r0,#0x10
000080  496d              LDR      r1,|L1.568|
000082  f8c10c10          STR      r0,[r1,#0xc10]
;;;77      } 
000086  bd70              POP      {r4-r6,pc}
;;;78     
                          ENDP

                  Ht1621WrAllData PROC
;;;87     //-----------------------------------------------------------------------------------------
;;;88     void Ht1621WrAllData(unsigned char Dis_Status) 
000088  b570              PUSH     {r4-r6,lr}
;;;89      { 
00008a  4605              MOV      r5,r0
;;;90      uchar i; 
;;;91      CS_1621_L;                //HT1621_CS=0; 
00008c  2010              MOVS     r0,#0x10
00008e  4968              LDR      r1,|L1.560|
000090  6008              STR      r0,[r1,#0]
;;;92      Ht1621Wr_Data(0xA0,3);    //写入数据标志101 
000092  f04f0103          MOV      r1,#3
000096  f04f00a0          MOV      r0,#0xa0
00009a  f7fffffe          BL       Ht1621Wr_Data
;;;93      Ht1621Wr_Data(0x00<<2,6); //写入地址数据 
00009e  2106              MOVS     r1,#6
0000a0  2000              MOVS     r0,#0
0000a2  f7fffffe          BL       Ht1621Wr_Data
;;;94      for (i=0;i<16;i++) 
0000a6  2400              MOVS     r4,#0
0000a8  e005              B        |L1.182|
                  |L1.170|
;;;95      { 
;;;96       Ht1621Wr_Data(Dis_Status,8);   //写入数据 
0000aa  2108              MOVS     r1,#8
0000ac  4628              MOV      r0,r5
0000ae  f7fffffe          BL       Ht1621Wr_Data
0000b2  1c60              ADDS     r0,r4,#1              ;94
0000b4  b2c4              UXTB     r4,r0                 ;94
                  |L1.182|
0000b6  2c10              CMP      r4,#0x10              ;94
0000b8  dbf7              BLT      |L1.170|
;;;97       } 
;;;98       CS_1621_H;               //HT1621_CS=1; 
0000ba  2010              MOVS     r0,#0x10
0000bc  495d              LDR      r1,|L1.564|
0000be  6008              STR      r0,[r1,#0]
;;;99      } 
0000c0  bd70              POP      {r4-r6,pc}
;;;100    
                          ENDP

                  Ht1621WrCmd PROC
;;;110    //-----------------------------------------------------------------------------------------
;;;111     void Ht1621WrCmd(uchar Cmd) 
0000c2  b510              PUSH     {r4,lr}
;;;112     { 
0000c4  4604              MOV      r4,r0
;;;113     CS_1621_L;                //HT1621_CS=0; 
0000c6  2010              MOVS     r0,#0x10
0000c8  4959              LDR      r1,|L1.560|
0000ca  6008              STR      r0,[r1,#0]
;;;114     Delay_uS(200);
0000cc  f04f00c8          MOV      r0,#0xc8
0000d0  f7fffffe          BL       delay_us
;;;115     Ht1621Wr_Data(COMMAND_MODE,4);    //写入命令标志100 
0000d4  2104              MOVS     r1,#4
0000d6  2080              MOVS     r0,#0x80
0000d8  f7fffffe          BL       Ht1621Wr_Data
;;;116     Ht1621Wr_Data(Cmd,8);     //写入命令数据 
0000dc  2108              MOVS     r1,#8
0000de  4620              MOV      r0,r4
0000e0  f7fffffe          BL       Ht1621Wr_Data
;;;117     CS_1621_H;                //HT1621_CS=1; 
0000e4  2010              MOVS     r0,#0x10
0000e6  4954              LDR      r1,|L1.568|
0000e8  f8c10c10          STR      r0,[r1,#0xc10]
;;;118     Delay_uS(200);
0000ec  20c8              MOVS     r0,#0xc8
0000ee  f7fffffe          BL       delay_us
;;;119     } 
0000f2  bd10              POP      {r4,pc}
;;;120    
                          ENDP

                  Ht1621_Init PROC
;;;127    //-----------------------------------------------------------------------------------------
;;;128    void Ht1621_Init()
0000f4  b510              PUSH     {r4,lr}
;;;129     {
;;;130     WR_1621_O;
0000f6  4851              LDR      r0,|L1.572|
0000f8  6800              LDR      r0,[r0,#0]
0000fa  f0206070          BIC      r0,r0,#0xf000000
0000fe  494e              LDR      r1,|L1.568|
000100  f8c10c00          STR      r0,[r1,#0xc00]
000104  4608              MOV      r0,r1
000106  f8d00c00          LDR      r0,[r0,#0xc00]
00010a  f04060e0          ORR      r0,r0,#0x7000000
00010e  f8c10c00          STR      r0,[r1,#0xc00]
;;;131     DATA_1621_O;
000112  4608              MOV      r0,r1
000114  f8d00c00          LDR      r0,[r0,#0xc00]
000118  f0204070          BIC      r0,r0,#0xf0000000
00011c  f8c10c00          STR      r0,[r1,#0xc00]
000120  4608              MOV      r0,r1
000122  f8d00c00          LDR      r0,[r0,#0xc00]
000126  f04040e0          ORR      r0,r0,#0x70000000
00012a  f8c10c00          STR      r0,[r1,#0xc00]
;;;132     CS_1621_O;
00012e  4608              MOV      r0,r1
000130  f8d00c00          LDR      r0,[r0,#0xc00]
000134  f4202070          BIC      r0,r0,#0xf0000
000138  f8c10c00          STR      r0,[r1,#0xc00]
00013c  4608              MOV      r0,r1
00013e  f8d00c00          LDR      r0,[r0,#0xc00]
000142  f44020e0          ORR      r0,r0,#0x70000
000146  493d              LDR      r1,|L1.572|
000148  6008              STR      r0,[r1,#0]
;;;133     CS_1621_H;                //HT1621_CS=1; 
00014a  f04f0010          MOV      r0,#0x10
00014e  4939              LDR      r1,|L1.564|
000150  6008              STR      r0,[r1,#0]
;;;134     WR_1621_H;                //HT1621_WR=1; 
000152  f04f0040          MOV      r0,#0x40
000156  6008              STR      r0,[r1,#0]
;;;135     DATA_1621_H;              //HT1621_DAT=1; 
000158  f04f0080          MOV      r0,#0x80
00015c  6008              STR      r0,[r1,#0]
;;;136     Delay_mS(1);            //延时使LCD工作电压稳定 
00015e  f04f0001          MOV      r0,#1
000162  f7fffffe          BL       delay_ms
;;;137     Ht1621WrCmd(BIAS);        
000166  2052              MOVS     r0,#0x52
000168  f7fffffe          BL       Ht1621WrCmd
;;;138     Ht1621WrCmd(RC256);       //使用内部振荡器  
00016c  2030              MOVS     r0,#0x30
00016e  f7fffffe          BL       Ht1621WrCmd
;;;139     Ht1621WrCmd(SYSEN); 
000172  2002              MOVS     r0,#2
000174  f7fffffe          BL       Ht1621WrCmd
;;;140     Ht1621WrCmd(LCDON);
000178  2006              MOVS     r0,#6
00017a  f7fffffe          BL       Ht1621WrCmd
;;;141     Ht1621WrCmd(TONEOFF);
00017e  2010              MOVS     r0,#0x10
000180  f7fffffe          BL       Ht1621WrCmd
;;;142     }
000184  bd10              POP      {r4,pc}
;;;143          
                          ENDP

                  S_Write_1621 PROC
;;;155    //**************************
;;;156    void S_Write_1621(uchar MemAddress,uchar *p,uchar i)
000186  e92d41f0          PUSH     {r4-r8,lr}
;;;157     { 
00018a  4604              MOV      r4,r0
00018c  460d              MOV      r5,r1
00018e  4617              MOV      r7,r2
;;;158     uchar s; 
;;;159     CS_1621_L;                      //HT1621_CS=0; 
000190  2010              MOVS     r0,#0x10
000192  4927              LDR      r1,|L1.560|
000194  6008              STR      r0,[r1,#0]
;;;160     Ht1621Wr_Data(WRITE_MODE,3);    //写入数据标志101 
000196  f04f0103          MOV      r1,#3
00019a  f04f00a0          MOV      r0,#0xa0
00019e  f7fffffe          BL       Ht1621Wr_Data
;;;161     Ht1621Wr_Data(MemAddress,6);    //写入地址数据 
0001a2  2106              MOVS     r1,#6
0001a4  4620              MOV      r0,r4
0001a6  f7fffffe          BL       Ht1621Wr_Data
;;;162     for (s=0;s<i;s++) 
0001aa  2600              MOVS     r6,#0
0001ac  e007              B        |L1.446|
                  |L1.430|
;;;163     { 
;;;164      Ht1621Wr_Data(*(p+s)<<4,4);    //写入数据  *(p+i) = p[i]
0001ae  5da9              LDRB     r1,[r5,r6]
0001b0  0709              LSLS     r1,r1,#28
0001b2  0e08              LSRS     r0,r1,#24
0001b4  2104              MOVS     r1,#4
0001b6  f7fffffe          BL       Ht1621Wr_Data
0001ba  1c70              ADDS     r0,r6,#1              ;162
0001bc  b2c6              UXTB     r6,r0                 ;162
                  |L1.446|
0001be  42be              CMP      r6,r7                 ;162
0001c0  dbf5              BLT      |L1.430|
;;;165      } 
;;;166      CS_1621_H;                     //HT1621_CS=1; 
0001c2  2010              MOVS     r0,#0x10
0001c4  491b              LDR      r1,|L1.564|
0001c6  6008              STR      r0,[r1,#0]
;;;167     } 
0001c8  e8bd81f0          POP      {r4-r8,pc}
;;;168    
                          ENDP

                  Refresh_LCD PROC
;;;177    //****************************************
;;;178    void Refresh_LCD(void)
0001cc  b510              PUSH     {r4,lr}
;;;179    {
;;;180    
;;;181    S_Write_1621(0,LCD_buffer,31);
0001ce  221f              MOVS     r2,#0x1f
0001d0  491b              LDR      r1,|L1.576|
0001d2  2000              MOVS     r0,#0
0001d4  f7fffffe          BL       S_Write_1621
;;;182    }
0001d8  bd10              POP      {r4,pc}
;;;183    
                          ENDP

                  Clear_LCD PROC
;;;184    void Clear_LCD(void)
0001da  2000              MOVS     r0,#0
;;;185    {
;;;186      char i;
;;;187    	for(i=0;i<31;i++)
0001dc  e004              B        |L1.488|
                  |L1.478|
;;;188    	{
;;;189    		LCD_buffer[i] = 0;
0001de  2100              MOVS     r1,#0
0001e0  4a17              LDR      r2,|L1.576|
0001e2  5411              STRB     r1,[r2,r0]
0001e4  1c41              ADDS     r1,r0,#1              ;187
0001e6  b2c8              UXTB     r0,r1                 ;187
                  |L1.488|
0001e8  281f              CMP      r0,#0x1f              ;187
0001ea  dbf8              BLT      |L1.478|
;;;190    	}
;;;191    }
0001ec  4770              BX       lr
;;;192    
                          ENDP

                  Buzzer PROC
;;;193    
;;;194    void Buzzer(int mS)
0001ee  b510              PUSH     {r4,lr}
;;;195    {
0001f0  4604              MOV      r4,r0
;;;196    #if BUZZER == USED
;;;197     Ht1621WrCmd(TONEON);
0001f2  2012              MOVS     r0,#0x12
0001f4  f7fffffe          BL       Ht1621WrCmd
;;;198    #endif
;;;199     Delay_mS(mS);
0001f8  4620              MOV      r0,r4
0001fa  f7fffffe          BL       delay_ms
;;;200     Ht1621WrCmd(TONEOFF);
0001fe  2010              MOVS     r0,#0x10
000200  f7fffffe          BL       Ht1621WrCmd
;;;201    }
000204  bd10              POP      {r4,pc}
;;;202    
                          ENDP

                  TEST PROC
;;;205    
;;;206     void TEST( void )
000206  b510              PUSH     {r4,lr}
;;;207     {
;;;208     uchar i=0x1d;
000208  241d              MOVS     r4,#0x1d
;;;209     Ht1621_Init(); //上电初始化LCD 
00020a  f7fffffe          BL       Ht1621_Init
;;;210     Delay_uS(250);  //延时一段时间 
00020e  20fa              MOVS     r0,#0xfa
000210  f7fffffe          BL       delay_us
;;;211     Ht1621WrAllData(0xff); 
000214  20ff              MOVS     r0,#0xff
000216  f7fffffe          BL       Ht1621WrAllData
;;;212     for(i=0;i<31;i++)
00021a  2400              MOVS     r4,#0
00021c  e005              B        |L1.554|
                  |L1.542|
;;;213     {
;;;214     Ht1621WrOneData(i,0);//9
00021e  2100              MOVS     r1,#0
000220  4620              MOV      r0,r4
000222  f7fffffe          BL       Ht1621WrOneData
000226  1c60              ADDS     r0,r4,#1              ;212
000228  b2c4              UXTB     r4,r0                 ;212
                  |L1.554|
00022a  2c1f              CMP      r4,#0x1f              ;212
00022c  dbf7              BLT      |L1.542|
;;;215     };
;;;216     }
00022e  bd10              POP      {r4,pc}
                          ENDP

                  |L1.560|
                          DCD      0x40010c14
                  |L1.564|
                          DCD      0x40010c10
                  |L1.568|
                          DCD      0x40010000
                  |L1.572|
                          DCD      0x40010c00
                  |L1.576|
                          DCD      LCD_buffer

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  LCD_buffer
                          %        31
