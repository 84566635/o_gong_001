; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\bsp_key.o --asm_dir=.\lis\ --list_dir=.\lis\ --depend=.\bsp_key.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\user\inc -I.\stdperiph_driver\inc -I.\cmsis -ID:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=521 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\bsp_key.crf user\src\bsp_key.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  IsKeyDown1 PROC
;;;90     
;;;91     	static uint8_t IsKeyDown1(void) {if ((GPIO_PORT_K1->IDR & GPIO_PIN_K1) == 0) return 1;else return 0;}
000000  4895              LDR      r0,|L1.600|
000002  6880              LDR      r0,[r0,#8]
000004  07c0              LSLS     r0,r0,#31
000006  d001              BEQ      |L1.12|
000008  2000              MOVS     r0,#0
00000a  4770              BX       lr
                  |L1.12|
00000c  2001              MOVS     r0,#1
00000e  4770              BX       lr
;;;92     	static uint8_t IsKeyDown2(void) {if ((GPIO_PORT_K2->IDR & GPIO_PIN_K2) == 0) return 1;else return 0;}
                          ENDP

                  IsKeyDown2 PROC
000010  4891              LDR      r0,|L1.600|
000012  6880              LDR      r0,[r0,#8]
000014  0780              LSLS     r0,r0,#30
000016  d401              BMI      |L1.28|
000018  2001              MOVS     r0,#1
00001a  4770              BX       lr
                  |L1.28|
00001c  2000              MOVS     r0,#0
00001e  4770              BX       lr
;;;93     	static uint8_t IsKeyDown3(void) {if ((GPIO_PORT_K3->IDR & GPIO_PIN_K3) == 0) return 1;else return 0;}
                          ENDP

                  IsKeyDown3 PROC
000020  488d              LDR      r0,|L1.600|
000022  6880              LDR      r0,[r0,#8]
000024  0740              LSLS     r0,r0,#29
000026  d401              BMI      |L1.44|
000028  2001              MOVS     r0,#1
00002a  4770              BX       lr
                  |L1.44|
00002c  2000              MOVS     r0,#0
00002e  4770              BX       lr
;;;94     	static uint8_t IsKeyDown4(void) {if ((GPIO_PORT_K4->IDR & GPIO_PIN_K4) == 0) return 1;else return 0;}
                          ENDP

                  IsKeyDown4 PROC
000030  4889              LDR      r0,|L1.600|
000032  6880              LDR      r0,[r0,#8]
000034  0700              LSLS     r0,r0,#28
000036  d401              BMI      |L1.60|
000038  2001              MOVS     r0,#1
00003a  4770              BX       lr
                  |L1.60|
00003c  2000              MOVS     r0,#0
00003e  4770              BX       lr
;;;95     	static uint8_t IsKeyDown5(void) {if ((GPIO_PORT_K5->IDR & GPIO_PIN_K5) == 0) return 1;else return 0;}
                          ENDP

                  IsKeyDown5 PROC
000040  4885              LDR      r0,|L1.600|
000042  6880              LDR      r0,[r0,#8]
000044  06c0              LSLS     r0,r0,#27
000046  d401              BMI      |L1.76|
000048  2001              MOVS     r0,#1
00004a  4770              BX       lr
                  |L1.76|
00004c  2000              MOVS     r0,#0
00004e  4770              BX       lr
;;;96     	static uint8_t IsKeyDown6(void) {if ((GPIO_PORT_K6->IDR & GPIO_PIN_K6) == 0) return 1;else return 0;}
                          ENDP

                  IsKeyDown6 PROC
000050  4881              LDR      r0,|L1.600|
000052  6880              LDR      r0,[r0,#8]
000054  0680              LSLS     r0,r0,#26
000056  d401              BMI      |L1.92|
000058  2001              MOVS     r0,#1
00005a  4770              BX       lr
                  |L1.92|
00005c  2000              MOVS     r0,#0
00005e  4770              BX       lr
;;;97     // 	static uint8_t IsKeyDown7(void) {if ((GPIO_PORT_K7->IDR & GPIO_PIN_K7) == 0) return 1;else return 0;}
                          ENDP

                  bsp_InitKey PROC
;;;110    */
;;;111    void bsp_InitKey(void)
000060  b510              PUSH     {r4,lr}
;;;112    {
;;;113    	bsp_InitKeyVar();		/* 初始化按键变量 */
000062  f7fffffe          BL       bsp_InitKeyVar
;;;114    	bsp_InitKeyHard();		/* 初始化按键硬件 */
000066  e8bd4010          POP      {r4,lr}
00006a  f7ffbffe          B.W      bsp_InitKeyHard
;;;115    }
;;;116    
                          ENDP

                  bsp_PutKey PROC
;;;124    */
;;;125    void bsp_PutKey(uint8_t _KeyCode)
00006e  497b              LDR      r1,|L1.604|
;;;126    {
;;;127    	s_tKey.Buf[s_tKey.Write] = _KeyCode;
000070  79ca              LDRB     r2,[r1,#7]  ; s_tKey
000072  5488              STRB     r0,[r1,r2]
;;;128    
;;;129    	if (++s_tKey.Write  >= KEY_FIFO_SIZE)
000074  79c8              LDRB     r0,[r1,#7]  ; s_tKey
000076  1c40              ADDS     r0,r0,#1
000078  b2c0              UXTB     r0,r0
00007a  71c8              STRB     r0,[r1,#7]
00007c  2806              CMP      r0,#6
00007e  d301              BCC      |L1.132|
;;;130    	{
;;;131    		s_tKey.Write = 0;
000080  2000              MOVS     r0,#0
000082  71c8              STRB     r0,[r1,#7]
                  |L1.132|
;;;132    	}
;;;133    }
000084  4770              BX       lr
;;;134    
                          ENDP

                  bsp_GetKey PROC
;;;142    */
;;;143    uint8_t bsp_GetKey(void)
000086  4975              LDR      r1,|L1.604|
;;;144    {
;;;145    	uint8_t ret;
;;;146    
;;;147    	if (s_tKey.Read == s_tKey.Write)
000088  798a              LDRB     r2,[r1,#6]  ; s_tKey
00008a  79c8              LDRB     r0,[r1,#7]  ; s_tKey
00008c  4282              CMP      r2,r0
00008e  d101              BNE      |L1.148|
;;;148    	{
;;;149    		return KEY_NONE;
000090  2000              MOVS     r0,#0
                  |L1.146|
;;;150    	}
;;;151    	else
;;;152    	{
;;;153    		ret = s_tKey.Buf[s_tKey.Read];
;;;154    
;;;155    		if (++s_tKey.Read >= KEY_FIFO_SIZE)
;;;156    		{
;;;157    			s_tKey.Read = 0;
;;;158    		}
;;;159    		return ret;
;;;160    	}
;;;161    }
000092  4770              BX       lr
                  |L1.148|
000094  5c88              LDRB     r0,[r1,r2]            ;153
000096  1c52              ADDS     r2,r2,#1              ;153
000098  b2d2              UXTB     r2,r2                 ;155
00009a  718a              STRB     r2,[r1,#6]            ;155
00009c  2a06              CMP      r2,#6                 ;155
00009e  d3f8              BCC      |L1.146|
0000a0  2200              MOVS     r2,#0                 ;157
0000a2  718a              STRB     r2,[r1,#6]            ;157
0000a4  4770              BX       lr
;;;162    
                          ENDP

                  bsp_GetKey2 PROC
;;;170    */
;;;171    uint8_t bsp_GetKey2(void)
0000a6  496d              LDR      r1,|L1.604|
;;;172    {
;;;173    	uint8_t ret;
;;;174    
;;;175    	if (s_tKey.Read2 == s_tKey.Write)
0000a8  7a0a              LDRB     r2,[r1,#8]  ; s_tKey
0000aa  79c8              LDRB     r0,[r1,#7]  ; s_tKey
0000ac  4282              CMP      r2,r0
0000ae  d101              BNE      |L1.180|
;;;176    	{
;;;177    		return KEY_NONE;
0000b0  2000              MOVS     r0,#0
                  |L1.178|
;;;178    	}
;;;179    	else
;;;180    	{
;;;181    		ret = s_tKey.Buf[s_tKey.Read2];
;;;182    
;;;183    		if (++s_tKey.Read2 >= KEY_FIFO_SIZE)
;;;184    		{
;;;185    			s_tKey.Read2 = 0;
;;;186    		}
;;;187    		return ret;
;;;188    	}
;;;189    }
0000b2  4770              BX       lr
                  |L1.180|
0000b4  5c88              LDRB     r0,[r1,r2]            ;181
0000b6  1c52              ADDS     r2,r2,#1              ;181
0000b8  b2d2              UXTB     r2,r2                 ;183
0000ba  720a              STRB     r2,[r1,#8]            ;183
0000bc  2a06              CMP      r2,#6                 ;183
0000be  d3f8              BCC      |L1.178|
0000c0  2200              MOVS     r2,#0                 ;185
0000c2  720a              STRB     r2,[r1,#8]            ;185
0000c4  4770              BX       lr
;;;190    
                          ENDP

                  bsp_GetKeyState PROC
;;;198    */
;;;199    uint8_t bsp_GetKeyState(KEY_ID_E _ucKeyID)
0000c6  4965              LDR      r1,|L1.604|
;;;200    {
;;;201    	return s_tBtn[_ucKeyID].State;
0000c8  3960              SUBS     r1,r1,#0x60
0000ca  eb011000          ADD      r0,r1,r0,LSL #4
0000ce  7a80              LDRB     r0,[r0,#0xa]
;;;202    }
0000d0  4770              BX       lr
;;;203    
                          ENDP

                  bsp_SetKeyParam PROC
;;;213    */
;;;214    void bsp_SetKeyParam(uint8_t _ucKeyID, uint16_t _LongTime, uint8_t  _RepeatSpeed)
0000d2  4b62              LDR      r3,|L1.604|
;;;215    {
;;;216    	s_tBtn[_ucKeyID].LongTime = _LongTime;			/* 长按时间 0 表示不检测长按键事件 */
0000d4  3b60              SUBS     r3,r3,#0x60
0000d6  eb031000          ADD      r0,r3,r0,LSL #4
0000da  8101              STRH     r1,[r0,#8]
;;;217    	s_tBtn[_ucKeyID].RepeatSpeed = _RepeatSpeed;			/* 按键连发的速度，0表示不支持连发 */
0000dc  72c2              STRB     r2,[r0,#0xb]
;;;218    	s_tBtn[_ucKeyID].RepeatCount = 0;						/* 连发计数器 */
0000de  2100              MOVS     r1,#0
0000e0  7301              STRB     r1,[r0,#0xc]
;;;219    }
0000e2  4770              BX       lr
;;;220    
                          ENDP

                  bsp_ClearKey PROC
;;;229    */
;;;230    void bsp_ClearKey(void)
0000e4  485d              LDR      r0,|L1.604|
;;;231    {
;;;232    	s_tKey.Read = s_tKey.Write;
0000e6  79c1              LDRB     r1,[r0,#7]  ; s_tKey
0000e8  7181              STRB     r1,[r0,#6]
;;;233    }
0000ea  4770              BX       lr
;;;234    
                          ENDP

                  bsp_DetectKey PROC
;;;345    */
;;;346    static void bsp_DetectKey(uint8_t i)
0000ec  b570              PUSH     {r4-r6,lr}
;;;347    {
0000ee  4606              MOV      r6,r0
;;;348    	KEY_T *pBtn;
;;;349    
;;;350    	/*
;;;351    		如果没有初始化按键函数，则报错
;;;352    		if (s_tBtn[i].IsKeyDownFunc == 0)
;;;353    		{
;;;354    			printf("Fault : DetectButton(), s_tBtn[i].IsKeyDownFunc undefine");
;;;355    		}
;;;356    	*/
;;;357    
;;;358    	pBtn = &s_tBtn[i];
0000f0  485a              LDR      r0,|L1.604|
0000f2  3860              SUBS     r0,r0,#0x60
0000f4  eb001406          ADD      r4,r0,r6,LSL #4
;;;359    	if (pBtn->IsKeyDownFunc())
0000f8  6820              LDR      r0,[r4,#0]
0000fa  4780              BLX      r0
;;;360    	{
;;;361    		if (pBtn->Count < KEY_FILTER_TIME)
;;;362    		{
;;;363    			pBtn->Count = KEY_FILTER_TIME;
0000fc  2105              MOVS     r1,#5
;;;364    		}
;;;365    		else if(pBtn->Count < 2 * KEY_FILTER_TIME)
;;;366    		{
;;;367    			pBtn->Count++;
;;;368    		}
;;;369    		else
;;;370    		{
;;;371    			if (pBtn->State == 0)
;;;372    			{
;;;373    				pBtn->State = 1;
;;;374    
;;;375    				/* 发送按钮按下的消息 */
;;;376    				bsp_PutKey((uint8_t)(3 * i + 1));
0000fe  2500              MOVS     r5,#0
000100  2800              CMP      r0,#0                 ;359
;;;377    			}
;;;378    
;;;379    			if (pBtn->LongTime > 0)
;;;380    			{
;;;381    				if (pBtn->LongCount < pBtn->LongTime)
;;;382    				{
;;;383    					/* 发送按钮持续按下的消息 */
;;;384    					if (++pBtn->LongCount == pBtn->LongTime)
;;;385    					{
;;;386    						/* 键值放入按键FIFO */
;;;387    						bsp_PutKey((uint8_t)(3 * i + 3));
;;;388    					}
;;;389    				}
;;;390    				else
;;;391    				{
;;;392    					if (pBtn->RepeatSpeed > 0)
;;;393    					{
;;;394    						if (++pBtn->RepeatCount >= pBtn->RepeatSpeed)
;;;395    						{
;;;396    							pBtn->RepeatCount = 0;
;;;397    							/* 常按键后，每隔10ms发送1个按键 */
;;;398    							bsp_PutKey((uint8_t)(3 * i + 1));
;;;399    						}
;;;400    					}
;;;401    				}
;;;402    			}
;;;403    		}
;;;404    	}
;;;405    	else
;;;406    	{
;;;407    		if(pBtn->Count > KEY_FILTER_TIME)
000102  7920              LDRB     r0,[r4,#4]
000104  eb060346          ADD      r3,r6,r6,LSL #1       ;376
000108  d030              BEQ      |L1.364|
00010a  2805              CMP      r0,#5                 ;361
00010c  d201              BCS      |L1.274|
00010e  7121              STRB     r1,[r4,#4]            ;363
;;;408    		{
;;;409    			pBtn->Count = KEY_FILTER_TIME;
;;;410    		}
;;;411    		else if(pBtn->Count != 0)
;;;412    		{
;;;413    			pBtn->Count--;
;;;414    		}
;;;415    		else
;;;416    		{
;;;417    			if (pBtn->State == 1)
;;;418    			{
;;;419    				pBtn->State = 0;
;;;420    
;;;421    				/* 发送按钮弹起的消息 */
;;;422    				bsp_PutKey((uint8_t)(3 * i + 2));
;;;423    			}
;;;424    		}
;;;425    
;;;426    		pBtn->LongCount = 0;
;;;427    		pBtn->RepeatCount = 0;
;;;428    	}
;;;429    }
000110  bd70              POP      {r4-r6,pc}
                  |L1.274|
000112  280a              CMP      r0,#0xa               ;365
000114  d202              BCS      |L1.284|
000116  1c40              ADDS     r0,r0,#1              ;365
000118  7120              STRB     r0,[r4,#4]            ;367
                  |L1.282|
00011a  bd70              POP      {r4-r6,pc}
                  |L1.284|
00011c  7aa0              LDRB     r0,[r4,#0xa]          ;371
00011e  eb060646          ADD      r6,r6,r6,LSL #1       ;376
000122  1c76              ADDS     r6,r6,#1              ;376
000124  b920              CBNZ     r0,|L1.304|
000126  2001              MOVS     r0,#1                 ;373
000128  72a0              STRB     r0,[r4,#0xa]          ;373
00012a  b2f0              UXTB     r0,r6                 ;376
00012c  f7fffffe          BL       bsp_PutKey
                  |L1.304|
000130  8921              LDRH     r1,[r4,#8]            ;379
000132  2900              CMP      r1,#0                 ;379
000134  d0f1              BEQ      |L1.282|
000136  88e0              LDRH     r0,[r4,#6]            ;381
000138  4288              CMP      r0,r1                 ;381
00013a  d208              BCS      |L1.334|
00013c  1c40              ADDS     r0,r0,#1              ;381
00013e  b280              UXTH     r0,r0                 ;384
000140  80e0              STRH     r0,[r4,#6]            ;384
000142  8921              LDRH     r1,[r4,#8]            ;384
000144  4288              CMP      r0,r1                 ;384
000146  d1e8              BNE      |L1.282|
000148  1cdb              ADDS     r3,r3,#3              ;384
00014a  b2d8              UXTB     r0,r3                 ;387
00014c  e00b              B        |L1.358|
                  |L1.334|
00014e  7ae0              LDRB     r0,[r4,#0xb]          ;392
000150  2800              CMP      r0,#0                 ;392
000152  d0e2              BEQ      |L1.282|
000154  7b20              LDRB     r0,[r4,#0xc]          ;394
000156  1c40              ADDS     r0,r0,#1              ;394
000158  b2c0              UXTB     r0,r0                 ;394
00015a  7320              STRB     r0,[r4,#0xc]          ;394
00015c  7ae1              LDRB     r1,[r4,#0xb]          ;394
00015e  4288              CMP      r0,r1                 ;394
000160  d3db              BCC      |L1.282|
000162  7325              STRB     r5,[r4,#0xc]          ;396
000164  b2f0              UXTB     r0,r6                 ;398
                  |L1.358|
000166  e8bd4070          POP      {r4-r6,lr}            ;398
00016a  e7fe              B        bsp_PutKey
                  |L1.364|
00016c  2805              CMP      r0,#5                 ;407
00016e  d901              BLS      |L1.372|
000170  7121              STRB     r1,[r4,#4]            ;409
000172  e00b              B        |L1.396|
                  |L1.372|
000174  b110              CBZ      r0,|L1.380|
000176  1e40              SUBS     r0,r0,#1              ;411
000178  7120              STRB     r0,[r4,#4]            ;413
00017a  e007              B        |L1.396|
                  |L1.380|
00017c  7aa0              LDRB     r0,[r4,#0xa]          ;417
00017e  2801              CMP      r0,#1                 ;417
000180  d104              BNE      |L1.396|
000182  1c9b              ADDS     r3,r3,#2              ;419
000184  72a5              STRB     r5,[r4,#0xa]          ;419
000186  b2d8              UXTB     r0,r3                 ;422
000188  f7fffffe          BL       bsp_PutKey
                  |L1.396|
00018c  80e5              STRH     r5,[r4,#6]            ;426
00018e  7325              STRB     r5,[r4,#0xc]          ;427
000190  bd70              POP      {r4-r6,pc}
;;;430    
                          ENDP

                  bsp_KeyScan PROC
;;;438    */
;;;439    void bsp_KeyScan(void)
000192  b510              PUSH     {r4,lr}
;;;440    {
;;;441    	uint8_t i;
;;;442    
;;;443    	for (i = 0; i < KEY_COUNT; i++)
000194  2400              MOVS     r4,#0
                  |L1.406|
;;;444    	{
;;;445    		bsp_DetectKey(i);
000196  4620              MOV      r0,r4
000198  f7fffffe          BL       bsp_DetectKey
00019c  1c64              ADDS     r4,r4,#1
00019e  b2e4              UXTB     r4,r4                 ;443
0001a0  2c06              CMP      r4,#6                 ;443
0001a2  d3f8              BCC      |L1.406|
;;;446    	}
;;;447    }
0001a4  bd10              POP      {r4,pc}
;;;448    
                          ENDP

                  bsp_InitKeyHard PROC
;;;242    */
;;;243    static void bsp_InitKeyHard(void)
0001a6  b538              PUSH     {r3-r5,lr}
;;;244    {
;;;245    	GPIO_InitTypeDef GPIO_InitStructure;
;;;246    
;;;247    	/* 第1步：打开GPIO时钟 */
;;;248    	RCC_APB2PeriphClockCmd(RCC_ALL_KEY, ENABLE);
0001a8  2101              MOVS     r1,#1
0001aa  2010              MOVS     r0,#0x10
0001ac  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;249    
;;;250    	/* 第2步：配置所有的按键GPIO为浮动输入模式(实际上CPU复位后就是输入状态) */
;;;251    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;		/* 设为输入口 */
0001b0  2028              MOVS     r0,#0x28
0001b2  f88d0003          STRB     r0,[sp,#3]
;;;252    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	/* IO口最大速度 */
0001b6  2003              MOVS     r0,#3
0001b8  f88d0002          STRB     r0,[sp,#2]
;;;253    
;;;254    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K1;
0001bc  2001              MOVS     r0,#1
;;;255    	GPIO_Init(GPIO_PORT_K1, &GPIO_InitStructure);
0001be  4c26              LDR      r4,|L1.600|
0001c0  f8ad0000          STRH     r0,[sp,#0]            ;254
0001c4  4669              MOV      r1,sp
0001c6  4620              MOV      r0,r4
0001c8  f7fffffe          BL       GPIO_Init
;;;256    
;;;257    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K2;
0001cc  2002              MOVS     r0,#2
0001ce  f8ad0000          STRH     r0,[sp,#0]
;;;258    	GPIO_Init(GPIO_PORT_K2, &GPIO_InitStructure);
0001d2  4669              MOV      r1,sp
0001d4  4620              MOV      r0,r4
0001d6  f7fffffe          BL       GPIO_Init
;;;259    
;;;260    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K3;
0001da  2004              MOVS     r0,#4
0001dc  f8ad0000          STRH     r0,[sp,#0]
;;;261    	GPIO_Init(GPIO_PORT_K3, &GPIO_InitStructure);
0001e0  4669              MOV      r1,sp
0001e2  4620              MOV      r0,r4
0001e4  f7fffffe          BL       GPIO_Init
;;;262    
;;;263    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K4;
0001e8  2008              MOVS     r0,#8
0001ea  f8ad0000          STRH     r0,[sp,#0]
;;;264    	GPIO_Init(GPIO_PORT_K4, &GPIO_InitStructure);
0001ee  4669              MOV      r1,sp
0001f0  4620              MOV      r0,r4
0001f2  f7fffffe          BL       GPIO_Init
;;;265    
;;;266    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K5;
0001f6  2010              MOVS     r0,#0x10
0001f8  f8ad0000          STRH     r0,[sp,#0]
;;;267    	GPIO_Init(GPIO_PORT_K5, &GPIO_InitStructure);
0001fc  4669              MOV      r1,sp
0001fe  4620              MOV      r0,r4
000200  f7fffffe          BL       GPIO_Init
;;;268    
;;;269     	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K6;
000204  2020              MOVS     r0,#0x20
000206  f8ad0000          STRH     r0,[sp,#0]
;;;270     	GPIO_Init(GPIO_PORT_K6, &GPIO_InitStructure);
00020a  4669              MOV      r1,sp
00020c  4620              MOV      r0,r4
00020e  f7fffffe          BL       GPIO_Init
;;;271    
;;;272    // 	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K7;
;;;273    // 	GPIO_Init(GPIO_PORT_K7, &GPIO_InitStructure);
;;;274    
;;;275    // 	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K8;
;;;276    // 	GPIO_Init(GPIO_PORT_K8, &GPIO_InitStructure);
;;;277    }
000212  bd38              POP      {r3-r5,pc}
;;;278    
                          ENDP

                  bsp_InitKeyVar PROC
;;;286    */
;;;287    static void bsp_InitKeyVar(void)
000214  b530              PUSH     {r4,r5,lr}
;;;288    {
;;;289    	uint8_t i;
;;;290    
;;;291    	/* 对按键FIFO读写指针清零 */
;;;292    	s_tKey.Read = 0;
000216  4911              LDR      r1,|L1.604|
000218  2000              MOVS     r0,#0
;;;293    	s_tKey.Write = 0;
;;;294    	s_tKey.Read2 = 0;
;;;295    
;;;296    	/* 给每个按键结构体成员变量赋一组缺省值 */
;;;297    	for (i = 0; i < KEY_COUNT; i++)
;;;298    	{
;;;299    		s_tBtn[i].LongTime = KEY_LONG_TIME;			/* 长按时间 0 表示不检测长按键事件 */
00021a  2464              MOVS     r4,#0x64
00021c  7188              STRB     r0,[r1,#6]            ;292
00021e  71c8              STRB     r0,[r1,#7]            ;293
000220  7208              STRB     r0,[r1,#8]            ;294
000222  3960              SUBS     r1,r1,#0x60
000224  4603              MOV      r3,r0                 ;297
;;;300    		s_tBtn[i].Count = KEY_FILTER_TIME / 2;		/* 计数器设置为滤波时间的一半 */
000226  2502              MOVS     r5,#2
                  |L1.552|
000228  eb011203          ADD      r2,r1,r3,LSL #4       ;299
;;;301    		s_tBtn[i].State = 0;							/* 按键缺省状态，0为未按下 */
;;;302    		//s_tBtn[i].KeyCodeDown = 3 * i + 1;				/* 按键按下的键值代码 */
;;;303    		//s_tBtn[i].KeyCodeUp   = 3 * i + 2;				/* 按键弹起的键值代码 */
;;;304    		//s_tBtn[i].KeyCodeLong = 3 * i + 3;				/* 按键被持续按下的键值代码 */
;;;305    		s_tBtn[i].RepeatSpeed = 0;						/* 按键连发的速度，0表示不支持连发 */
;;;306    		s_tBtn[i].RepeatCount = 0;						/* 连发计数器 */
00022c  1c5b              ADDS     r3,r3,#1
00022e  8114              STRH     r4,[r2,#8]            ;299
000230  7115              STRB     r5,[r2,#4]            ;300
000232  7290              STRB     r0,[r2,#0xa]          ;301
000234  72d0              STRB     r0,[r2,#0xb]          ;305
000236  b2db              UXTB     r3,r3                 ;297
000238  7310              STRB     r0,[r2,#0xc]
00023a  2b06              CMP      r3,#6                 ;297
00023c  d3f4              BCC      |L1.552|
;;;307    	}
;;;308    
;;;309    	/* 如果需要单独更改某个按键的参数，可以在此单独重新赋值 */
;;;310    	/* 比如，我们希望按键1按下超过1秒后，自动重发相同键值 */
;;;311    // 	s_tBtn[KID_JOY_U].LongTime = 100;
;;;312    // 	s_tBtn[KID_JOY_U].RepeatSpeed = 5;	/* 每隔50ms自动发送键值 */
;;;313    
;;;314    // 	s_tBtn[KID_JOY_D].LongTime = 100;
;;;315    // 	s_tBtn[KID_JOY_D].RepeatSpeed = 5;	/* 每隔50ms自动发送键值 */
;;;316    
;;;317    // 	s_tBtn[KID_JOY_L].LongTime = 100;
;;;318    // 	s_tBtn[KID_JOY_L].RepeatSpeed = 5;	/* 每隔50ms自动发送键值 */
;;;319    
;;;320    // 	s_tBtn[KID_JOY_R].LongTime = 100;
;;;321    // 	s_tBtn[KID_JOY_R].RepeatSpeed = 5;	/* 每隔50ms自动发送键值 */
;;;322    
;;;323    	/* 判断按键按下的函数 */
;;;324    	s_tBtn[0].IsKeyDownFunc = IsKeyDown1;
00023e  4808              LDR      r0,|L1.608|
;;;325    	s_tBtn[1].IsKeyDownFunc = IsKeyDown2;
000240  6008              STR      r0,[r1,#0]  ; s_tBtn
000242  4808              LDR      r0,|L1.612|
;;;326    	s_tBtn[2].IsKeyDownFunc = IsKeyDown3;
000244  6108              STR      r0,[r1,#0x10]  ; s_tBtn
000246  4808              LDR      r0,|L1.616|
;;;327    	s_tBtn[3].IsKeyDownFunc = IsKeyDown4;
000248  6208              STR      r0,[r1,#0x20]  ; s_tBtn
00024a  4808              LDR      r0,|L1.620|
;;;328    	s_tBtn[4].IsKeyDownFunc = IsKeyDown5;
00024c  6308              STR      r0,[r1,#0x30]  ; s_tBtn
00024e  4808              LDR      r0,|L1.624|
;;;329    	s_tBtn[5].IsKeyDownFunc = IsKeyDown6;
000250  6408              STR      r0,[r1,#0x40]  ; s_tBtn
000252  4808              LDR      r0,|L1.628|
000254  6508              STR      r0,[r1,#0x50]  ; s_tBtn
;;;330    // 	s_tBtn[6].IsKeyDownFunc = IsKeyDown7;
;;;331    // 	s_tBtn[7].IsKeyDownFunc = IsKeyDown8;
;;;332    
;;;333    	/* 组合键 */
;;;334    // 	s_tBtn[8].IsKeyDownFunc = IsKeyDown9;
;;;335    // 	s_tBtn[9].IsKeyDownFunc = IsKeyDown10;
;;;336    }
000256  bd30              POP      {r4,r5,pc}
;;;337    
                          ENDP

                  |L1.600|
                          DCD      0x40011000
                  |L1.604|
                          DCD      ||.bss||+0x60
                  |L1.608|
                          DCD      IsKeyDown1
                  |L1.612|
                          DCD      IsKeyDown2
                  |L1.616|
                          DCD      IsKeyDown3
                  |L1.620|
                          DCD      IsKeyDown4
                  |L1.624|
                          DCD      IsKeyDown5
                  |L1.628|
                          DCD      IsKeyDown6

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  s_tBtn
                          %        96
                  s_tKey
                          %        9
