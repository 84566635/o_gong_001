; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\bsp.o --asm_dir=.\lis\ --list_dir=.\lis\ --depend=.\bsp.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\user\inc -I.\stdperiph_driver\inc -I.\cmsis -ID:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=521 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\bsp.crf user\src\bsp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  bsp_Init PROC
;;;33     */
;;;34     void bsp_Init(void)
000000  b510              PUSH     {r4,lr}
;;;35     {
;;;36     	/*
;;;37     		由于ST固件库的启动文件已经执行了CPU系统时钟的初始化，所以不必再次重复配置系统时钟。
;;;38     		启动文件配置了CPU主时钟频率、内部Flash访问速度和可选的外部SRAM FSMC初始化。
;;;39     
;;;40     		系统时钟缺省配置为168MHz，如果需要更改，可以修改 system_stm32f4xx.c 文件
;;;41     	*/
;;;42     
;;;43     //	bsp_InitUart(); 	/* 初始化串口 */
;;;44     	bsp_InitKey();		/* 初始化按键变量（必须在 bsp_InitTimer() 之前调用） */
000002  f7fffffe          BL       bsp_InitKey
;;;45     	bsp_InitTimer();	/* 初始化系统滴答定时器 */
000006  f7fffffe          BL       bsp_InitTimer
;;;46     	
;;;47     	bsp_InitLed();
00000a  e8bd4010          POP      {r4,lr}
00000e  f7ffbffe          B.W      bsp_InitLed
;;;48     
;;;49     	/* 针对不同的应用程序，添加需要的底层驱动模块初始化函数 */
;;;50     }
;;;51     
                          ENDP

                  bsp_RunPer10ms PROC
;;;60     */
;;;61     void bsp_RunPer10ms(void)
000012  f7ffbffe          B.W      bsp_KeyScan
;;;62     {
;;;63     	bsp_KeyScan();		/* 按键扫描 */
;;;64     }
;;;65     
                          ENDP

                  bsp_RunPer2s PROC
;;;74     */
;;;75     void bsp_RunPer2s(void)
000016  b510              PUSH     {r4,lr}
;;;76     {
;;;77     	static char per2scond_count = 0;
;;;78     	static char perCO2_count = 0;
;;;79     	static char collect_data_falg = 1,co2_colect_falg = 1;
;;;80     	
;;;81     	Refresh_LCD();
000018  f7fffffe          BL       Refresh_LCD
;;;82     	if(per2scond_count<7)
00001c  4c24              LDR      r4,|L1.176|
00001e  2100              MOVS     r1,#0
000020  7820              LDRB     r0,[r4,#0]  ; per2scond_count
000022  2807              CMP      r0,#7
000024  d202              BCS      |L1.44|
000026  1c40              ADDS     r0,r0,#1
;;;83     	{
;;;84     		per2scond_count++;
000028  7020              STRB     r0,[r4,#0]
00002a  e004              B        |L1.54|
                  |L1.44|
;;;85     	}
;;;86     	else
;;;87     	{
;;;88     		per2scond_count = 0;
00002c  7021              STRB     r1,[r4,#0]
;;;89     		collect_data_falg ^= 0x01;
00002e  78a0              LDRB     r0,[r4,#2]  ; collect_data_falg
000030  f0800001          EOR      r0,r0,#1
000034  70a0              STRB     r0,[r4,#2]
                  |L1.54|
;;;90     	}
;;;91     	if(perCO2_count<2)
000036  7860              LDRB     r0,[r4,#1]  ; perCO2_count
000038  2802              CMP      r0,#2
00003a  d202              BCS      |L1.66|
00003c  1c40              ADDS     r0,r0,#1
;;;92     	{
;;;93     		perCO2_count++;
00003e  7060              STRB     r0,[r4,#1]
000040  e004              B        |L1.76|
                  |L1.66|
;;;94       }
;;;95     	else
;;;96     	{
;;;97     		co2_colect_falg ^= 0x01;
000042  78e0              LDRB     r0,[r4,#3]  ; co2_colect_falg
000044  f0800001          EOR      r0,r0,#1
000048  70e0              STRB     r0,[r4,#3]
;;;98     		perCO2_count = 0;
00004a  7061              STRB     r1,[r4,#1]
                  |L1.76|
;;;99       }
;;;100    	if((co2_colect_falg)&&(flag_CO_PW==1))
00004c  78e0              LDRB     r0,[r4,#3]  ; co2_colect_falg
00004e  b128              CBZ      r0,|L1.92|
000050  4818              LDR      r0,|L1.180|
000052  7800              LDRB     r0,[r0,#0]  ; flag_CO_PW
000054  2801              CMP      r0,#1
000056  d101              BNE      |L1.92|
;;;101    	{
;;;102    		get_co2_value();
000058  f7fffffe          BL       get_co2_value
                  |L1.92|
;;;103      }
;;;104    	if(collect_data_falg)
00005c  78a0              LDRB     r0,[r4,#2]  ; collect_data_falg
00005e  2800              CMP      r0,#0
000060  d012              BEQ      |L1.136|
;;;105    	{
;;;106    				switch (per2scond_count)
000062  7821              LDRB     r1,[r4,#0]  ; per2scond_count
;;;107    				{
;;;108    					case 0:
;;;109    // 								if(flag_CO_PW==1)
;;;110    // 								{
;;;111    // 									CO2_PW_EN;
;;;112    // 									//if(flag_getCO2_value==0)
;;;113    // 									//get_co2_value();
;;;114    // 								}
;;;115    								if(flag_PM_PW==1)
000064  4814              LDR      r0,|L1.184|
;;;116    								{
;;;117    									clear_PM_rec();
;;;118    									PM_PW_EN;
000066  f44f5480          MOV      r4,#0x1000
00006a  2907              CMP      r1,#7                 ;106
00006c  d20c              BCS      |L1.136|
00006e  e8dff001          TBB      [pc,r1]               ;106
000072  040b              DCB      0x04,0x0b
000074  0b0b0c0b          DCB      0x0b,0x0b,0x0c,0x0b
000078  1900              DCB      0x19,0x00
00007a  7800              LDRB     r0,[r0,#0]            ;115  ; flag_PM_PW
00007c  2801              CMP      r0,#1                 ;115
00007e  d103              BNE      |L1.136|
000080  f7fffffe          BL       clear_PM_rec
000084  480d              LDR      r0,|L1.188|
                  |L1.134|
000086  6004              STR      r4,[r0,#0]
                  |L1.136|
;;;119    								}
;;;120    								break;
;;;121    					case 1:
;;;122    // 						    if(flag_getCO2_value==0)
;;;123    // 								get_co2_value();
;;;124    								break;
;;;125    					case 2:
;;;126    								
;;;127    								break;
;;;128    					case 3:
;;;129    // 						    if(flag_getCO2_value==0)
;;;130    // 								get_co2_value();
;;;131    								break;
;;;132    					case 4:
;;;133    			 			    if(flag_PM_PW==1&&flag_getPM_value==0)
;;;134    			 					{
;;;135    			 			      USART_Cmd(USART2,ENABLE);
;;;136    			 					}
;;;137    								break;
;;;138    					case 5:
;;;139    // 						    if(flag_getCO2_value==0)
;;;140    // 								get_co2_value();
;;;141    								break;
;;;142    					case 6:
;;;143    						    //CO2_PW_DISABLE;
;;;144    								PM_PW_DISABLE;
;;;145    								break;
;;;146    				}
;;;147      }
;;;148    
;;;149    }
000088  bd10              POP      {r4,pc}
00008a  7800              LDRB     r0,[r0,#0]            ;133  ; flag_PM_PW
00008c  2801              CMP      r0,#1                 ;133
00008e  d1fb              BNE      |L1.136|
000090  480b              LDR      r0,|L1.192|
000092  7800              LDRB     r0,[r0,#0]            ;133  ; flag_getPM_value
000094  2800              CMP      r0,#0                 ;133
000096  d1f7              BNE      |L1.136|
000098  e8bd4010          POP      {r4,lr}               ;135
00009c  2101              MOVS     r1,#1                 ;135
00009e  4809              LDR      r0,|L1.196|
0000a0  f7ffbffe          B.W      USART_Cmd
0000a4  4805              LDR      r0,|L1.188|
0000a6  1d00              ADDS     r0,r0,#4              ;144
0000a8  e7ed              B        |L1.134|
;;;150    /*
                          ENDP

                  bsp_RunPer1ms PROC
;;;158    */
;;;159    void bsp_RunPer1ms(void)
0000aa  4770              BX       lr
;;;160    {
;;;161    	//TOUCH_Scan();	/* 触摸扫描 */
;;;162    }
;;;163    
                          ENDP

                  bsp_Idle PROC
;;;172    */
;;;173    void bsp_Idle(void)
0000ac  4770              BX       lr
;;;174    {
;;;175    	/* --- 喂狗 */
;;;176    
;;;177    	/* --- 让CPU进入休眠，由Systick定时中断唤醒或者其他中断唤醒 */
;;;178    
;;;179    	/* 对于 emWin 图形库，可以插入图形库需要的轮询函数 */
;;;180    	//GUI_Exec();
;;;181    
;;;182    	/* 对于 uIP 协议实现，可以插入uip轮询函数 */
;;;183    }
;;;184    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L1.176|
                          DCD      ||.data||
                  |L1.180|
                          DCD      flag_CO_PW
                  |L1.184|
                          DCD      flag_PM_PW
                  |L1.188|
                          DCD      0x40010810
                  |L1.192|
                          DCD      flag_getPM_value
                  |L1.196|
                          DCD      0x40004400

                          AREA ||.data||, DATA, ALIGN=0

                  per2scond_count
000000  00                DCB      0x00
                  perCO2_count
000001  00                DCB      0x00
                  collect_data_falg
000002  01                DCB      0x01
                  co2_colect_falg
000003  01                DCB      0x01
