; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\stm32f10x_flash.o --asm_dir=.\lis\ --list_dir=.\lis\ --depend=.\stm32f10x_flash.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\user\inc -I.\stdperiph_driver\inc -I.\cmsis -ID:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=521 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\stm32f10x_flash.crf stdperiph_driver\src\stm32f10x_flash.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  FLASH_SetLatency PROC
;;;253      */
;;;254    void FLASH_SetLatency(uint32_t FLASH_Latency)
000000  4afc              LDR      r2,|L1.1012|
;;;255    {
;;;256      uint32_t tmpreg = 0;
;;;257      
;;;258      /* Check the parameters */
;;;259      assert_param(IS_FLASH_LATENCY(FLASH_Latency));
;;;260      
;;;261      /* Read the ACR register */
;;;262      tmpreg = FLASH->ACR;  
000002  6811              LDR      r1,[r2,#0]
;;;263      
;;;264      /* Sets the Latency value */
;;;265      tmpreg &= ACR_LATENCY_Mask;
000004  f0010138          AND      r1,r1,#0x38
;;;266      tmpreg |= FLASH_Latency;
000008  4301              ORRS     r1,r1,r0
;;;267      
;;;268      /* Write the ACR register */
;;;269      FLASH->ACR = tmpreg;
00000a  6011              STR      r1,[r2,#0]
;;;270    }
00000c  4770              BX       lr
;;;271    
                          ENDP

                  FLASH_HalfCycleAccessCmd PROC
;;;280      */
;;;281    void FLASH_HalfCycleAccessCmd(uint32_t FLASH_HalfCycleAccess)
00000e  49f9              LDR      r1,|L1.1012|
;;;282    {
;;;283      /* Check the parameters */
;;;284      assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
;;;285      
;;;286      /* Enable or disable the Half cycle access */
;;;287      FLASH->ACR &= ACR_HLFCYA_Mask;
000010  680a              LDR      r2,[r1,#0]
000012  f0220208          BIC      r2,r2,#8
000016  600a              STR      r2,[r1,#0]
;;;288      FLASH->ACR |= FLASH_HalfCycleAccess;
000018  680a              LDR      r2,[r1,#0]
00001a  4302              ORRS     r2,r2,r0
00001c  600a              STR      r2,[r1,#0]
;;;289    }
00001e  4770              BX       lr
;;;290    
                          ENDP

                  FLASH_PrefetchBufferCmd PROC
;;;299      */
;;;300    void FLASH_PrefetchBufferCmd(uint32_t FLASH_PrefetchBuffer)
000020  49f4              LDR      r1,|L1.1012|
;;;301    {
;;;302      /* Check the parameters */
;;;303      assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
;;;304      
;;;305      /* Enable or disable the Prefetch Buffer */
;;;306      FLASH->ACR &= ACR_PRFTBE_Mask;
000022  680a              LDR      r2,[r1,#0]
000024  f0220210          BIC      r2,r2,#0x10
000028  600a              STR      r2,[r1,#0]
;;;307      FLASH->ACR |= FLASH_PrefetchBuffer;
00002a  680a              LDR      r2,[r1,#0]
00002c  4302              ORRS     r2,r2,r0
00002e  600a              STR      r2,[r1,#0]
;;;308    }
000030  4770              BX       lr
;;;309    
                          ENDP

                  FLASH_Unlock PROC
;;;318      */
;;;319    void FLASH_Unlock(void)
000032  48f0              LDR      r0,|L1.1012|
;;;320    {
;;;321      /* Authorize the FPEC of Bank1 Access */
;;;322      FLASH->KEYR = FLASH_KEY1;
000034  49f0              LDR      r1,|L1.1016|
000036  6041              STR      r1,[r0,#4]
;;;323      FLASH->KEYR = FLASH_KEY2;
000038  49f0              LDR      r1,|L1.1020|
00003a  6041              STR      r1,[r0,#4]
;;;324    
;;;325    #ifdef STM32F10X_XL
;;;326      /* Authorize the FPEC of Bank2 Access */
;;;327      FLASH->KEYR2 = FLASH_KEY1;
;;;328      FLASH->KEYR2 = FLASH_KEY2;
;;;329    #endif /* STM32F10X_XL */
;;;330    }
00003c  4770              BX       lr
;;;331    /**
                          ENDP

                  FLASH_UnlockBank1 PROC
;;;339      */
;;;340    void FLASH_UnlockBank1(void)
00003e  48ed              LDR      r0,|L1.1012|
;;;341    {
;;;342      /* Authorize the FPEC of Bank1 Access */
;;;343      FLASH->KEYR = FLASH_KEY1;
000040  49ed              LDR      r1,|L1.1016|
000042  6041              STR      r1,[r0,#4]
;;;344      FLASH->KEYR = FLASH_KEY2;
000044  49ed              LDR      r1,|L1.1020|
000046  6041              STR      r1,[r0,#4]
;;;345    }
000048  4770              BX       lr
;;;346    
                          ENDP

                  FLASH_Lock PROC
;;;371      */
;;;372    void FLASH_Lock(void)
00004a  48ea              LDR      r0,|L1.1012|
;;;373    {
;;;374      /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
;;;375      FLASH->CR |= CR_LOCK_Set;
00004c  6901              LDR      r1,[r0,#0x10]
00004e  f0410180          ORR      r1,r1,#0x80
000052  6101              STR      r1,[r0,#0x10]
;;;376    
;;;377    #ifdef STM32F10X_XL
;;;378      /* Set the Lock Bit to lock the FPEC and the CR of  Bank2 */
;;;379      FLASH->CR2 |= CR_LOCK_Set;
;;;380    #endif /* STM32F10X_XL */
;;;381    }
000054  4770              BX       lr
;;;382    
                          ENDP

                  FLASH_LockBank1 PROC
;;;391      */
;;;392    void FLASH_LockBank1(void)
000056  48e7              LDR      r0,|L1.1012|
;;;393    {
;;;394      /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
;;;395      FLASH->CR |= CR_LOCK_Set;
000058  6901              LDR      r1,[r0,#0x10]
00005a  f0410180          ORR      r1,r1,#0x80
00005e  6101              STR      r1,[r0,#0x10]
;;;396    }
000060  4770              BX       lr
;;;397    
                          ENDP

                  FLASH_GetBank1Status PROC
;;;1514     */
;;;1515   FLASH_Status FLASH_GetBank1Status(void)
000062  49e4              LDR      r1,|L1.1012|
;;;1516   {
;;;1517     FLASH_Status flashstatus = FLASH_COMPLETE;
000064  2004              MOVS     r0,#4
;;;1518     
;;;1519     if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
000066  68ca              LDR      r2,[r1,#0xc]
000068  07d2              LSLS     r2,r2,#31
00006a  d001              BEQ      |L1.112|
;;;1520     {
;;;1521       flashstatus = FLASH_BUSY;
00006c  2001              MOVS     r0,#1
;;;1522     }
;;;1523     else 
;;;1524     {  
;;;1525       if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
;;;1526       { 
;;;1527         flashstatus = FLASH_ERROR_PG;
;;;1528       }
;;;1529       else 
;;;1530       {
;;;1531         if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
;;;1532         {
;;;1533           flashstatus = FLASH_ERROR_WRP;
;;;1534         }
;;;1535         else
;;;1536         {
;;;1537           flashstatus = FLASH_COMPLETE;
;;;1538         }
;;;1539       }
;;;1540     }
;;;1541     /* Return the Flash Status */
;;;1542     return flashstatus;
;;;1543   }
00006e  4770              BX       lr
                  |L1.112|
000070  68ca              LDR      r2,[r1,#0xc]          ;1525
000072  0752              LSLS     r2,r2,#29             ;1525
000074  d501              BPL      |L1.122|
000076  2002              MOVS     r0,#2                 ;1527
                  |L1.120|
000078  4770              BX       lr
                  |L1.122|
00007a  68c9              LDR      r1,[r1,#0xc]          ;1531
00007c  06c9              LSLS     r1,r1,#27             ;1531
00007e  d5fb              BPL      |L1.120|
000080  2003              MOVS     r0,#3                 ;1533
000082  4770              BX       lr
;;;1544   
                          ENDP

                  FLASH_WaitForLastOperation PROC
;;;1594     */
;;;1595   FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
000084  b500              PUSH     {lr}
;;;1596   { 
000086  4603              MOV      r3,r0
;;;1597     FLASH_Status status = FLASH_COMPLETE;
;;;1598      
;;;1599     /* Check for the Flash Status */
;;;1600     status = FLASH_GetBank1Status();
000088  f7fffffe          BL       FLASH_GetBank1Status
;;;1601     /* Wait for a Flash operation to complete or a TIMEOUT to occur */
;;;1602     while((status == FLASH_BUSY) && (Timeout != 0x00))
00008c  e003              B        |L1.150|
;;;1603     {
;;;1604       status = FLASH_GetBank1Status();
00008e  bf00              NOP      
                  |L1.144|
000090  f7fffffe          BL       FLASH_GetBank1Status
000094  1e5b              SUBS     r3,r3,#1
                  |L1.150|
000096  2801              CMP      r0,#1                 ;1602
000098  d003              BEQ      |L1.162|
;;;1605       Timeout--;
;;;1606     }
;;;1607     if(Timeout == 0x00 )
00009a  2b00              CMP      r3,#0
00009c  d100              BNE      |L1.160|
                  |L1.158|
;;;1608     {
;;;1609       status = FLASH_TIMEOUT;
00009e  2005              MOVS     r0,#5
                  |L1.160|
;;;1610     }
;;;1611     /* Return the operation status */
;;;1612     return status;
;;;1613   }
0000a0  bd00              POP      {pc}
                  |L1.162|
0000a2  2b00              CMP      r3,#0                 ;1602
0000a4  d1f4              BNE      |L1.144|
0000a6  e7fa              B        |L1.158|
;;;1614   
                          ENDP

                  FLASH_ErasePage PROC
;;;418      */
;;;419    FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
0000a8  b570              PUSH     {r4-r6,lr}
;;;420    {
0000aa  4605              MOV      r5,r0
;;;421      FLASH_Status status = FLASH_COMPLETE;
;;;422      /* Check the parameters */
;;;423      assert_param(IS_FLASH_ADDRESS(Page_Address));
;;;424    
;;;425    #ifdef STM32F10X_XL
;;;426      if(Page_Address < FLASH_BANK1_END_ADDRESS)  
;;;427      {
;;;428        /* Wait for last operation to be completed */
;;;429        status = FLASH_WaitForLastBank1Operation(EraseTimeout);
;;;430        if(status == FLASH_COMPLETE)
;;;431        { 
;;;432          /* if the previous operation is completed, proceed to erase the page */
;;;433          FLASH->CR|= CR_PER_Set;
;;;434          FLASH->AR = Page_Address; 
;;;435          FLASH->CR|= CR_STRT_Set;
;;;436        
;;;437          /* Wait for last operation to be completed */
;;;438          status = FLASH_WaitForLastBank1Operation(EraseTimeout);
;;;439    
;;;440          /* Disable the PER Bit */
;;;441          FLASH->CR &= CR_PER_Reset;
;;;442        }
;;;443      }
;;;444      else
;;;445      {
;;;446        /* Wait for last operation to be completed */
;;;447        status = FLASH_WaitForLastBank2Operation(EraseTimeout);
;;;448        if(status == FLASH_COMPLETE)
;;;449        { 
;;;450          /* if the previous operation is completed, proceed to erase the page */
;;;451          FLASH->CR2|= CR_PER_Set;
;;;452          FLASH->AR2 = Page_Address; 
;;;453          FLASH->CR2|= CR_STRT_Set;
;;;454        
;;;455          /* Wait for last operation to be completed */
;;;456          status = FLASH_WaitForLastBank2Operation(EraseTimeout);
;;;457          
;;;458          /* Disable the PER Bit */
;;;459          FLASH->CR2 &= CR_PER_Reset;
;;;460        }
;;;461      }
;;;462    #else
;;;463      /* Wait for last operation to be completed */
;;;464      status = FLASH_WaitForLastOperation(EraseTimeout);
0000ac  f44f2630          MOV      r6,#0xb0000
0000b0  4630              MOV      r0,r6
0000b2  f7fffffe          BL       FLASH_WaitForLastOperation
;;;465      
;;;466      if(status == FLASH_COMPLETE)
0000b6  2804              CMP      r0,#4
0000b8  d111              BNE      |L1.222|
;;;467      { 
;;;468        /* if the previous operation is completed, proceed to erase the page */
;;;469        FLASH->CR|= CR_PER_Set;
0000ba  4cce              LDR      r4,|L1.1012|
0000bc  6920              LDR      r0,[r4,#0x10]
0000be  f0400002          ORR      r0,r0,#2
0000c2  6120              STR      r0,[r4,#0x10]
;;;470        FLASH->AR = Page_Address; 
0000c4  6165              STR      r5,[r4,#0x14]
;;;471        FLASH->CR|= CR_STRT_Set;
0000c6  6920              LDR      r0,[r4,#0x10]
0000c8  f0400040          ORR      r0,r0,#0x40
0000cc  6120              STR      r0,[r4,#0x10]
;;;472        
;;;473        /* Wait for last operation to be completed */
;;;474        status = FLASH_WaitForLastOperation(EraseTimeout);
0000ce  4630              MOV      r0,r6
0000d0  f7fffffe          BL       FLASH_WaitForLastOperation
;;;475        
;;;476        /* Disable the PER Bit */
;;;477        FLASH->CR &= CR_PER_Reset;
0000d4  6921              LDR      r1,[r4,#0x10]
0000d6  f64172fd          MOV      r2,#0x1ffd
0000da  4011              ANDS     r1,r1,r2
0000dc  6121              STR      r1,[r4,#0x10]
                  |L1.222|
;;;478      }
;;;479    #endif /* STM32F10X_XL */
;;;480    
;;;481      /* Return the Erase Status */
;;;482      return status;
;;;483    }
0000de  bd70              POP      {r4-r6,pc}
;;;484    
                          ENDP

                  FLASH_EraseAllPages PROC
;;;491      */
;;;492    FLASH_Status FLASH_EraseAllPages(void)
0000e0  b530              PUSH     {r4,r5,lr}
;;;493    {
;;;494      FLASH_Status status = FLASH_COMPLETE;
;;;495    
;;;496    #ifdef STM32F10X_XL
;;;497      /* Wait for last operation to be completed */
;;;498      status = FLASH_WaitForLastBank1Operation(EraseTimeout);
;;;499      
;;;500      if(status == FLASH_COMPLETE)
;;;501      {
;;;502        /* if the previous operation is completed, proceed to erase all pages */
;;;503         FLASH->CR |= CR_MER_Set;
;;;504         FLASH->CR |= CR_STRT_Set;
;;;505        
;;;506        /* Wait for last operation to be completed */
;;;507        status = FLASH_WaitForLastBank1Operation(EraseTimeout);
;;;508        
;;;509        /* Disable the MER Bit */
;;;510        FLASH->CR &= CR_MER_Reset;
;;;511      }    
;;;512      if(status == FLASH_COMPLETE)
;;;513      {
;;;514        /* if the previous operation is completed, proceed to erase all pages */
;;;515         FLASH->CR2 |= CR_MER_Set;
;;;516         FLASH->CR2 |= CR_STRT_Set;
;;;517        
;;;518        /* Wait for last operation to be completed */
;;;519        status = FLASH_WaitForLastBank2Operation(EraseTimeout);
;;;520        
;;;521        /* Disable the MER Bit */
;;;522        FLASH->CR2 &= CR_MER_Reset;
;;;523      }
;;;524    #else
;;;525      /* Wait for last operation to be completed */
;;;526      status = FLASH_WaitForLastOperation(EraseTimeout);
0000e2  f44f2530          MOV      r5,#0xb0000
0000e6  4628              MOV      r0,r5
0000e8  f7fffffe          BL       FLASH_WaitForLastOperation
;;;527      if(status == FLASH_COMPLETE)
0000ec  2804              CMP      r0,#4
0000ee  d110              BNE      |L1.274|
;;;528      {
;;;529        /* if the previous operation is completed, proceed to erase all pages */
;;;530         FLASH->CR |= CR_MER_Set;
0000f0  4cc0              LDR      r4,|L1.1012|
0000f2  6920              LDR      r0,[r4,#0x10]
0000f4  f0400004          ORR      r0,r0,#4
0000f8  6120              STR      r0,[r4,#0x10]
;;;531         FLASH->CR |= CR_STRT_Set;
0000fa  6920              LDR      r0,[r4,#0x10]
0000fc  f0400040          ORR      r0,r0,#0x40
000100  6120              STR      r0,[r4,#0x10]
;;;532        
;;;533        /* Wait for last operation to be completed */
;;;534        status = FLASH_WaitForLastOperation(EraseTimeout);
000102  4628              MOV      r0,r5
000104  f7fffffe          BL       FLASH_WaitForLastOperation
;;;535    
;;;536        /* Disable the MER Bit */
;;;537        FLASH->CR &= CR_MER_Reset;
000108  6921              LDR      r1,[r4,#0x10]
00010a  f64172fb          MOV      r2,#0x1ffb
00010e  4011              ANDS     r1,r1,r2
000110  6121              STR      r1,[r4,#0x10]
                  |L1.274|
;;;538      }
;;;539    #endif /* STM32F10X_XL */
;;;540    
;;;541      /* Return the Erase Status */
;;;542      return status;
;;;543    }
000112  bd30              POP      {r4,r5,pc}
;;;544    
                          ENDP

                  FLASH_WaitForLastBank1Operation PROC
;;;1622     */
;;;1623   FLASH_Status FLASH_WaitForLastBank1Operation(uint32_t Timeout)
000114  b500              PUSH     {lr}
;;;1624   { 
000116  4603              MOV      r3,r0
;;;1625     FLASH_Status status = FLASH_COMPLETE;
;;;1626      
;;;1627     /* Check for the Flash Status */
;;;1628     status = FLASH_GetBank1Status();
000118  f7fffffe          BL       FLASH_GetBank1Status
;;;1629     /* Wait for a Flash operation to complete or a TIMEOUT to occur */
;;;1630     while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
00011c  e003              B        |L1.294|
;;;1631     {
;;;1632       status = FLASH_GetBank1Status();
00011e  bf00              NOP      
                  |L1.288|
000120  f7fffffe          BL       FLASH_GetBank1Status
000124  1e5b              SUBS     r3,r3,#1
                  |L1.294|
000126  2801              CMP      r0,#1                 ;1630
000128  d003              BEQ      |L1.306|
;;;1633       Timeout--;
;;;1634     }
;;;1635     if(Timeout == 0x00 )
00012a  2b00              CMP      r3,#0
00012c  d100              BNE      |L1.304|
                  |L1.302|
;;;1636     {
;;;1637       status = FLASH_TIMEOUT;
00012e  2005              MOVS     r0,#5
                  |L1.304|
;;;1638     }
;;;1639     /* Return the operation status */
;;;1640     return status;
;;;1641   }
000130  bd00              POP      {pc}
                  |L1.306|
000132  2b00              CMP      r3,#0                 ;1630
000134  d1f4              BNE      |L1.288|
000136  e7fa              B        |L1.302|
;;;1642   
                          ENDP

                  FLASH_EraseAllBank1Pages PROC
;;;554      */
;;;555    FLASH_Status FLASH_EraseAllBank1Pages(void)
000138  b530              PUSH     {r4,r5,lr}
;;;556    {
;;;557      FLASH_Status status = FLASH_COMPLETE;
;;;558      /* Wait for last operation to be completed */
;;;559      status = FLASH_WaitForLastBank1Operation(EraseTimeout);
00013a  f44f2530          MOV      r5,#0xb0000
00013e  4628              MOV      r0,r5
000140  f7fffffe          BL       FLASH_WaitForLastBank1Operation
;;;560      
;;;561      if(status == FLASH_COMPLETE)
000144  2804              CMP      r0,#4
000146  d110              BNE      |L1.362|
;;;562      {
;;;563        /* if the previous operation is completed, proceed to erase all pages */
;;;564         FLASH->CR |= CR_MER_Set;
000148  4caa              LDR      r4,|L1.1012|
00014a  6920              LDR      r0,[r4,#0x10]
00014c  f0400004          ORR      r0,r0,#4
000150  6120              STR      r0,[r4,#0x10]
;;;565         FLASH->CR |= CR_STRT_Set;
000152  6920              LDR      r0,[r4,#0x10]
000154  f0400040          ORR      r0,r0,#0x40
000158  6120              STR      r0,[r4,#0x10]
;;;566        
;;;567        /* Wait for last operation to be completed */
;;;568        status = FLASH_WaitForLastBank1Operation(EraseTimeout);
00015a  4628              MOV      r0,r5
00015c  f7fffffe          BL       FLASH_WaitForLastBank1Operation
;;;569        
;;;570        /* Disable the MER Bit */
;;;571        FLASH->CR &= CR_MER_Reset;
000160  6921              LDR      r1,[r4,#0x10]
000162  f64172fb          MOV      r2,#0x1ffb
000166  4011              ANDS     r1,r1,r2
000168  6121              STR      r1,[r4,#0x10]
                  |L1.362|
;;;572      }    
;;;573      /* Return the Erase Status */
;;;574      return status;
;;;575    }
00016a  bd30              POP      {r4,r5,pc}
;;;576    
                          ENDP

                  FLASH_GetReadOutProtectionStatus PROC
;;;1239     */
;;;1240   FlagStatus FLASH_GetReadOutProtectionStatus(void)
00016c  49a1              LDR      r1,|L1.1012|
;;;1241   {
;;;1242     FlagStatus readoutstatus = RESET;
00016e  2000              MOVS     r0,#0
;;;1243     if ((FLASH->OBR & RDPRT_Mask) != (uint32_t)RESET)
000170  69c9              LDR      r1,[r1,#0x1c]
000172  0789              LSLS     r1,r1,#30
000174  d500              BPL      |L1.376|
;;;1244     {
;;;1245       readoutstatus = SET;
000176  2001              MOVS     r0,#1
                  |L1.376|
;;;1246     }
;;;1247     else
;;;1248     {
;;;1249       readoutstatus = RESET;
;;;1250     }
;;;1251     return readoutstatus;
;;;1252   }
000178  4770              BX       lr
;;;1253   
                          ENDP

                  FLASH_EraseOptionBytes PROC
;;;615      */
;;;616    FLASH_Status FLASH_EraseOptionBytes(void)
00017a  b570              PUSH     {r4-r6,lr}
;;;617    {
;;;618      uint16_t rdptmp = RDP_Key;
00017c  25a5              MOVS     r5,#0xa5
;;;619    
;;;620      FLASH_Status status = FLASH_COMPLETE;
;;;621    
;;;622      /* Get the actual read protection Option Byte value */ 
;;;623      if(FLASH_GetReadOutProtectionStatus() != RESET)
00017e  f7fffffe          BL       FLASH_GetReadOutProtectionStatus
000182  b100              CBZ      r0,|L1.390|
;;;624      {
;;;625        rdptmp = 0x00;  
000184  2500              MOVS     r5,#0
                  |L1.390|
;;;626      }
;;;627    
;;;628      /* Wait for last operation to be completed */
;;;629      status = FLASH_WaitForLastOperation(EraseTimeout);
000186  f44f2630          MOV      r6,#0xb0000
00018a  4630              MOV      r0,r6
00018c  f7fffffe          BL       FLASH_WaitForLastOperation
;;;630      if(status == FLASH_COMPLETE)
000190  2804              CMP      r0,#4
000192  d127              BNE      |L1.484|
;;;631      {
;;;632        /* Authorize the small information block programming */
;;;633        FLASH->OPTKEYR = FLASH_KEY1;
000194  4c97              LDR      r4,|L1.1012|
000196  4898              LDR      r0,|L1.1016|
000198  60a0              STR      r0,[r4,#8]
;;;634        FLASH->OPTKEYR = FLASH_KEY2;
00019a  4898              LDR      r0,|L1.1020|
00019c  60a0              STR      r0,[r4,#8]
;;;635        
;;;636        /* if the previous operation is completed, proceed to erase the option bytes */
;;;637        FLASH->CR |= CR_OPTER_Set;
00019e  6920              LDR      r0,[r4,#0x10]
0001a0  f0400020          ORR      r0,r0,#0x20
0001a4  6120              STR      r0,[r4,#0x10]
;;;638        FLASH->CR |= CR_STRT_Set;
0001a6  6920              LDR      r0,[r4,#0x10]
0001a8  f0400040          ORR      r0,r0,#0x40
0001ac  6120              STR      r0,[r4,#0x10]
;;;639        /* Wait for last operation to be completed */
;;;640        status = FLASH_WaitForLastOperation(EraseTimeout);
0001ae  4630              MOV      r0,r6
0001b0  f7fffffe          BL       FLASH_WaitForLastOperation
;;;641        
;;;642        if(status == FLASH_COMPLETE)
;;;643        {
;;;644          /* if the erase operation is completed, disable the OPTER Bit */
;;;645          FLASH->CR &= CR_OPTER_Reset;
;;;646           
;;;647          /* Enable the Option Bytes Programming operation */
;;;648          FLASH->CR |= CR_OPTPG_Set;
;;;649          /* Restore the last read protection Option Byte value */
;;;650          OB->RDP = (uint16_t)rdptmp; 
;;;651          /* Wait for last operation to be completed */
;;;652          status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;653     
;;;654          if(status != FLASH_TIMEOUT)
;;;655          {
;;;656            /* if the program operation is completed, disable the OPTPG Bit */
;;;657            FLASH->CR &= CR_OPTPG_Reset;
0001b4  f64176ef          MOV      r6,#0x1fef
0001b8  2804              CMP      r0,#4                 ;642
0001ba  d10e              BNE      |L1.474|
0001bc  6920              LDR      r0,[r4,#0x10]         ;645
0001be  f64171df          MOV      r1,#0x1fdf            ;645
0001c2  4008              ANDS     r0,r0,r1              ;645
0001c4  6120              STR      r0,[r4,#0x10]         ;645
0001c6  6920              LDR      r0,[r4,#0x10]         ;648
0001c8  f0400010          ORR      r0,r0,#0x10           ;648
0001cc  6120              STR      r0,[r4,#0x10]         ;648
0001ce  488c              LDR      r0,|L1.1024|
0001d0  8005              STRH     r5,[r0,#0]            ;650
0001d2  f44f5000          MOV      r0,#0x2000            ;652
0001d6  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L1.474|
;;;658          }
;;;659        }
;;;660        else
;;;661        {
;;;662          if (status != FLASH_TIMEOUT)
0001da  2805              CMP      r0,#5
0001dc  d002              BEQ      |L1.484|
0001de  6921              LDR      r1,[r4,#0x10]         ;657
0001e0  4031              ANDS     r1,r1,r6              ;657
0001e2  6121              STR      r1,[r4,#0x10]         ;657
                  |L1.484|
;;;663          {
;;;664            /* Disable the OPTPG Bit */
;;;665            FLASH->CR &= CR_OPTPG_Reset;
;;;666          }
;;;667        }  
;;;668      }
;;;669      /* Return the erase status */
;;;670      return status;
;;;671    }
0001e4  bd70              POP      {r4-r6,pc}
;;;672    
                          ENDP

                  FLASH_ProgramWord PROC
;;;680      */
;;;681    FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
0001e6  b5f8              PUSH     {r3-r7,lr}
;;;682    {
0001e8  4606              MOV      r6,r0
;;;683      FLASH_Status status = FLASH_COMPLETE;
;;;684      __IO uint32_t tmp = 0;
0001ea  2000              MOVS     r0,#0
;;;685    
;;;686      /* Check the parameters */
;;;687      assert_param(IS_FLASH_ADDRESS(Address));
;;;688    
;;;689    #ifdef STM32F10X_XL
;;;690      if(Address < FLASH_BANK1_END_ADDRESS - 2)
;;;691      { 
;;;692        /* Wait for last operation to be completed */
;;;693        status = FLASH_WaitForLastBank1Operation(ProgramTimeout); 
;;;694        if(status == FLASH_COMPLETE)
;;;695        {
;;;696          /* if the previous operation is completed, proceed to program the new first 
;;;697            half word */
;;;698          FLASH->CR |= CR_PG_Set;
;;;699      
;;;700          *(__IO uint16_t*)Address = (uint16_t)Data;
;;;701          /* Wait for last operation to be completed */
;;;702          status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;703     
;;;704          if(status == FLASH_COMPLETE)
;;;705          {
;;;706            /* if the previous operation is completed, proceed to program the new second 
;;;707            half word */
;;;708            tmp = Address + 2;
;;;709    
;;;710            *(__IO uint16_t*) tmp = Data >> 16;
;;;711        
;;;712            /* Wait for last operation to be completed */
;;;713            status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;714            
;;;715            /* Disable the PG Bit */
;;;716            FLASH->CR &= CR_PG_Reset;
;;;717          }
;;;718          else
;;;719          {
;;;720            /* Disable the PG Bit */
;;;721            FLASH->CR &= CR_PG_Reset;
;;;722           }
;;;723        }
;;;724      }
;;;725      else if(Address == (FLASH_BANK1_END_ADDRESS - 1))
;;;726      {
;;;727        /* Wait for last operation to be completed */
;;;728        status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
;;;729    
;;;730        if(status == FLASH_COMPLETE)
;;;731        {
;;;732          /* if the previous operation is completed, proceed to program the new first 
;;;733            half word */
;;;734          FLASH->CR |= CR_PG_Set;
;;;735      
;;;736          *(__IO uint16_t*)Address = (uint16_t)Data;
;;;737    
;;;738          /* Wait for last operation to be completed */
;;;739          status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
;;;740          
;;;741    	  /* Disable the PG Bit */
;;;742          FLASH->CR &= CR_PG_Reset;
;;;743        }
;;;744        else
;;;745        {
;;;746          /* Disable the PG Bit */
;;;747          FLASH->CR &= CR_PG_Reset;
;;;748        }
;;;749    
;;;750        /* Wait for last operation to be completed */
;;;751        status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;752    
;;;753        if(status == FLASH_COMPLETE)
;;;754        {
;;;755          /* if the previous operation is completed, proceed to program the new second 
;;;756          half word */
;;;757          FLASH->CR2 |= CR_PG_Set;
;;;758          tmp = Address + 2;
;;;759    
;;;760          *(__IO uint16_t*) tmp = Data >> 16;
;;;761        
;;;762          /* Wait for last operation to be completed */
;;;763          status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;764            
;;;765          /* Disable the PG Bit */
;;;766          FLASH->CR2 &= CR_PG_Reset;
;;;767        }
;;;768        else
;;;769        {
;;;770          /* Disable the PG Bit */
;;;771          FLASH->CR2 &= CR_PG_Reset;
;;;772        }
;;;773      }
;;;774      else
;;;775      {
;;;776        /* Wait for last operation to be completed */
;;;777        status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;778    
;;;779        if(status == FLASH_COMPLETE)
;;;780        {
;;;781          /* if the previous operation is completed, proceed to program the new first 
;;;782            half word */
;;;783          FLASH->CR2 |= CR_PG_Set;
;;;784      
;;;785          *(__IO uint16_t*)Address = (uint16_t)Data;
;;;786          /* Wait for last operation to be completed */
;;;787          status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;788     
;;;789          if(status == FLASH_COMPLETE)
;;;790          {
;;;791            /* if the previous operation is completed, proceed to program the new second 
;;;792            half word */
;;;793            tmp = Address + 2;
;;;794    
;;;795            *(__IO uint16_t*) tmp = Data >> 16;
;;;796        
;;;797            /* Wait for last operation to be completed */
;;;798            status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;799            
;;;800            /* Disable the PG Bit */
;;;801            FLASH->CR2 &= CR_PG_Reset;
;;;802          }
;;;803          else
;;;804          {
;;;805            /* Disable the PG Bit */
;;;806            FLASH->CR2 &= CR_PG_Reset;
;;;807          }
;;;808        }
;;;809      }
;;;810    #else
;;;811      /* Wait for last operation to be completed */
;;;812      status = FLASH_WaitForLastOperation(ProgramTimeout);
0001ec  f44f5c00          MOV      r12,#0x2000
0001f0  9000              STR      r0,[sp,#0]
0001f2  460d              MOV      r5,r1                 ;682
0001f4  4660              MOV      r0,r12
0001f6  f7fffffe          BL       FLASH_WaitForLastOperation
;;;813      
;;;814      if(status == FLASH_COMPLETE)
0001fa  2804              CMP      r0,#4
0001fc  d116              BNE      |L1.556|
;;;815      {
;;;816        /* if the previous operation is completed, proceed to program the new first 
;;;817        half word */
;;;818        FLASH->CR |= CR_PG_Set;
0001fe  4c7d              LDR      r4,|L1.1012|
000200  6920              LDR      r0,[r4,#0x10]
000202  f0400001          ORR      r0,r0,#1
000206  6120              STR      r0,[r4,#0x10]
;;;819      
;;;820        *(__IO uint16_t*)Address = (uint16_t)Data;
000208  8035              STRH     r5,[r6,#0]
;;;821        /* Wait for last operation to be completed */
;;;822        status = FLASH_WaitForLastOperation(ProgramTimeout);
00020a  4660              MOV      r0,r12
00020c  f7fffffe          BL       FLASH_WaitForLastOperation
;;;823     
;;;824        if(status == FLASH_COMPLETE)
;;;825        {
;;;826          /* if the previous operation is completed, proceed to program the new second 
;;;827          half word */
;;;828          tmp = Address + 2;
;;;829    
;;;830          *(__IO uint16_t*) tmp = Data >> 16;
;;;831        
;;;832          /* Wait for last operation to be completed */
;;;833          status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;834            
;;;835          /* Disable the PG Bit */
;;;836          FLASH->CR &= CR_PG_Reset;
000210  f64177fe          MOV      r7,#0x1ffe
000214  2804              CMP      r0,#4                 ;824
000216  d106              BNE      |L1.550|
000218  1cb6              ADDS     r6,r6,#2              ;824
00021a  0c28              LSRS     r0,r5,#16             ;830
00021c  9600              STR      r6,[sp,#0]            ;830
00021e  8030              STRH     r0,[r6,#0]            ;830
000220  4660              MOV      r0,r12                ;833
000222  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L1.550|
;;;837        }
;;;838        else
;;;839        {
;;;840          /* Disable the PG Bit */
;;;841          FLASH->CR &= CR_PG_Reset;
000226  6921              LDR      r1,[r4,#0x10]
000228  4039              ANDS     r1,r1,r7
00022a  6121              STR      r1,[r4,#0x10]
                  |L1.556|
;;;842        }
;;;843      }         
;;;844    #endif /* STM32F10X_XL */
;;;845       
;;;846      /* Return the Program Status */
;;;847      return status;
;;;848    }
00022c  bdf8              POP      {r3-r7,pc}
;;;849    
                          ENDP

                  FLASH_ProgramHalfWord PROC
;;;857      */
;;;858    FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
00022e  b5f0              PUSH     {r4-r7,lr}
;;;859    {
000230  4606              MOV      r6,r0
;;;860      FLASH_Status status = FLASH_COMPLETE;
;;;861      /* Check the parameters */
;;;862      assert_param(IS_FLASH_ADDRESS(Address));
;;;863    
;;;864    #ifdef STM32F10X_XL
;;;865      /* Wait for last operation to be completed */
;;;866      status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;867      
;;;868      if(Address < FLASH_BANK1_END_ADDRESS)
;;;869      {
;;;870        if(status == FLASH_COMPLETE)
;;;871        {
;;;872          /* if the previous operation is completed, proceed to program the new data */
;;;873          FLASH->CR |= CR_PG_Set;
;;;874      
;;;875          *(__IO uint16_t*)Address = Data;
;;;876          /* Wait for last operation to be completed */
;;;877          status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
;;;878    
;;;879          /* Disable the PG Bit */
;;;880          FLASH->CR &= CR_PG_Reset;
;;;881        }
;;;882      }
;;;883      else
;;;884      {
;;;885        if(status == FLASH_COMPLETE)
;;;886        {
;;;887          /* if the previous operation is completed, proceed to program the new data */
;;;888          FLASH->CR2 |= CR_PG_Set;
;;;889      
;;;890          *(__IO uint16_t*)Address = Data;
;;;891          /* Wait for last operation to be completed */
;;;892          status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;893    
;;;894          /* Disable the PG Bit */
;;;895          FLASH->CR2 &= CR_PG_Reset;
;;;896        }
;;;897      }
;;;898    #else
;;;899      /* Wait for last operation to be completed */
;;;900      status = FLASH_WaitForLastOperation(ProgramTimeout);
000232  f44f5700          MOV      r7,#0x2000
000236  460d              MOV      r5,r1                 ;859
000238  4638              MOV      r0,r7
00023a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;901      
;;;902      if(status == FLASH_COMPLETE)
00023e  2804              CMP      r0,#4
000240  d10c              BNE      |L1.604|
;;;903      {
;;;904        /* if the previous operation is completed, proceed to program the new data */
;;;905        FLASH->CR |= CR_PG_Set;
000242  4c6c              LDR      r4,|L1.1012|
000244  6920              LDR      r0,[r4,#0x10]
000246  f0400001          ORR      r0,r0,#1
00024a  6120              STR      r0,[r4,#0x10]
;;;906      
;;;907        *(__IO uint16_t*)Address = Data;
00024c  8035              STRH     r5,[r6,#0]
;;;908        /* Wait for last operation to be completed */
;;;909        status = FLASH_WaitForLastOperation(ProgramTimeout);
00024e  4638              MOV      r0,r7
000250  f7fffffe          BL       FLASH_WaitForLastOperation
;;;910        
;;;911        /* Disable the PG Bit */
;;;912        FLASH->CR &= CR_PG_Reset;
000254  6921              LDR      r1,[r4,#0x10]
000256  1eba              SUBS     r2,r7,#2
000258  4011              ANDS     r1,r1,r2
00025a  6121              STR      r1,[r4,#0x10]
                  |L1.604|
;;;913      } 
;;;914    #endif  /* STM32F10X_XL */
;;;915      
;;;916      /* Return the Program Status */
;;;917      return status;
;;;918    }
00025c  bdf0              POP      {r4-r7,pc}
;;;919    
                          ENDP

                  FLASH_ProgramOptionByteData PROC
;;;928      */
;;;929    FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
00025e  b5f0              PUSH     {r4-r7,lr}
;;;930    {
000260  4606              MOV      r6,r0
;;;931      FLASH_Status status = FLASH_COMPLETE;
;;;932      /* Check the parameters */
;;;933      assert_param(IS_OB_DATA_ADDRESS(Address));
;;;934      status = FLASH_WaitForLastOperation(ProgramTimeout);
000262  f44f5700          MOV      r7,#0x2000
000266  460d              MOV      r5,r1                 ;930
000268  4638              MOV      r0,r7
00026a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;935    
;;;936      if(status == FLASH_COMPLETE)
00026e  2804              CMP      r0,#4
000270  d113              BNE      |L1.666|
;;;937      {
;;;938        /* Authorize the small information block programming */
;;;939        FLASH->OPTKEYR = FLASH_KEY1;
000272  4c60              LDR      r4,|L1.1012|
000274  4860              LDR      r0,|L1.1016|
000276  60a0              STR      r0,[r4,#8]
;;;940        FLASH->OPTKEYR = FLASH_KEY2;
000278  4860              LDR      r0,|L1.1020|
00027a  60a0              STR      r0,[r4,#8]
;;;941        /* Enables the Option Bytes Programming operation */
;;;942        FLASH->CR |= CR_OPTPG_Set; 
00027c  6920              LDR      r0,[r4,#0x10]
00027e  f0400010          ORR      r0,r0,#0x10
000282  6120              STR      r0,[r4,#0x10]
;;;943        *(__IO uint16_t*)Address = Data;
000284  8035              STRH     r5,[r6,#0]
;;;944        
;;;945        /* Wait for last operation to be completed */
;;;946        status = FLASH_WaitForLastOperation(ProgramTimeout);
000286  4638              MOV      r0,r7
000288  f7fffffe          BL       FLASH_WaitForLastOperation
;;;947        if(status != FLASH_TIMEOUT)
00028c  2805              CMP      r0,#5
00028e  d004              BEQ      |L1.666|
;;;948        {
;;;949          /* if the program operation is completed, disable the OPTPG Bit */
;;;950          FLASH->CR &= CR_OPTPG_Reset;
000290  6921              LDR      r1,[r4,#0x10]
000292  f64172ef          MOV      r2,#0x1fef
000296  4011              ANDS     r1,r1,r2
000298  6121              STR      r1,[r4,#0x10]
                  |L1.666|
;;;951        }
;;;952      }
;;;953      /* Return the Option Byte Data Program Status */
;;;954      return status;
;;;955    }
00029a  bdf0              POP      {r4-r7,pc}
;;;956    
                          ENDP

                  FLASH_EnableWriteProtection PROC
;;;974      */
;;;975    FLASH_Status FLASH_EnableWriteProtection(uint32_t FLASH_Pages)
00029c  e92d41f0          PUSH     {r4-r8,lr}
;;;976    {
;;;977      uint16_t WRP0_Data = 0xFFFF, WRP1_Data = 0xFFFF, WRP2_Data = 0xFFFF, WRP3_Data = 0xFFFF;
;;;978      
;;;979      FLASH_Status status = FLASH_COMPLETE;
;;;980      
;;;981      /* Check the parameters */
;;;982      assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
;;;983      
;;;984      FLASH_Pages = (uint32_t)(~FLASH_Pages);
0002a0  43c0              MVNS     r0,r0
;;;985      WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
0002a2  f0000cff          AND      r12,r0,#0xff
;;;986      WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
0002a6  f3c02707          UBFX     r7,r0,#8,#8
;;;987      WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
0002aa  f3c04607          UBFX     r6,r0,#16,#8
;;;988      WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
0002ae  0e05              LSRS     r5,r0,#24
;;;989      
;;;990      /* Wait for last operation to be completed */
;;;991      status = FLASH_WaitForLastOperation(ProgramTimeout);
0002b0  f44f5800          MOV      r8,#0x2000
0002b4  4640              MOV      r0,r8
0002b6  f7fffffe          BL       FLASH_WaitForLastOperation
;;;992      
;;;993      if(status == FLASH_COMPLETE)
0002ba  2804              CMP      r0,#4
0002bc  d137              BNE      |L1.814|
;;;994      {
;;;995        /* Authorizes the small information block programming */
;;;996        FLASH->OPTKEYR = FLASH_KEY1;
0002be  4c4d              LDR      r4,|L1.1012|
0002c0  494d              LDR      r1,|L1.1016|
0002c2  60a1              STR      r1,[r4,#8]
;;;997        FLASH->OPTKEYR = FLASH_KEY2;
0002c4  494d              LDR      r1,|L1.1020|
0002c6  60a1              STR      r1,[r4,#8]
;;;998        FLASH->CR |= CR_OPTPG_Set;
0002c8  6921              LDR      r1,[r4,#0x10]
0002ca  f0410110          ORR      r1,r1,#0x10
0002ce  6121              STR      r1,[r4,#0x10]
;;;999        if(WRP0_Data != 0xFF)
0002d0  f1bc0fff          CMP      r12,#0xff
0002d4  d008              BEQ      |L1.744|
;;;1000       {
;;;1001         OB->WRP0 = WRP0_Data;
0002d6  484a              LDR      r0,|L1.1024|
0002d8  3008              ADDS     r0,r0,#8
0002da  f8a0c000          STRH     r12,[r0,#0]
;;;1002         
;;;1003         /* Wait for last operation to be completed */
;;;1004         status = FLASH_WaitForLastOperation(ProgramTimeout);
0002de  4640              MOV      r0,r8
0002e0  f7fffffe          BL       FLASH_WaitForLastOperation
;;;1005       }
;;;1006       if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
0002e4  2804              CMP      r0,#4
0002e6  d11b              BNE      |L1.800|
                  |L1.744|
0002e8  2fff              CMP      r7,#0xff
0002ea  d007              BEQ      |L1.764|
;;;1007       {
;;;1008         OB->WRP1 = WRP1_Data;
0002ec  4844              LDR      r0,|L1.1024|
0002ee  300a              ADDS     r0,r0,#0xa
0002f0  8007              STRH     r7,[r0,#0]
;;;1009         
;;;1010         /* Wait for last operation to be completed */
;;;1011         status = FLASH_WaitForLastOperation(ProgramTimeout);
0002f2  4640              MOV      r0,r8
0002f4  f7fffffe          BL       FLASH_WaitForLastOperation
;;;1012       }
;;;1013       if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
0002f8  2804              CMP      r0,#4
0002fa  d111              BNE      |L1.800|
                  |L1.764|
0002fc  2eff              CMP      r6,#0xff
0002fe  d007              BEQ      |L1.784|
;;;1014       {
;;;1015         OB->WRP2 = WRP2_Data;
000300  483f              LDR      r0,|L1.1024|
000302  300c              ADDS     r0,r0,#0xc
000304  8006              STRH     r6,[r0,#0]
;;;1016         
;;;1017         /* Wait for last operation to be completed */
;;;1018         status = FLASH_WaitForLastOperation(ProgramTimeout);
000306  4640              MOV      r0,r8
000308  f7fffffe          BL       FLASH_WaitForLastOperation
;;;1019       }
;;;1020       
;;;1021       if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
00030c  2804              CMP      r0,#4
00030e  d107              BNE      |L1.800|
                  |L1.784|
000310  2dff              CMP      r5,#0xff
000312  d007              BEQ      |L1.804|
;;;1022       {
;;;1023         OB->WRP3 = WRP3_Data;
000314  483a              LDR      r0,|L1.1024|
000316  300e              ADDS     r0,r0,#0xe
000318  8005              STRH     r5,[r0,#0]
;;;1024        
;;;1025         /* Wait for last operation to be completed */
;;;1026         status = FLASH_WaitForLastOperation(ProgramTimeout);
00031a  4640              MOV      r0,r8
00031c  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L1.800|
;;;1027       }
;;;1028             
;;;1029       if(status != FLASH_TIMEOUT)
000320  2805              CMP      r0,#5
000322  d004              BEQ      |L1.814|
                  |L1.804|
;;;1030       {
;;;1031         /* if the program operation is completed, disable the OPTPG Bit */
;;;1032         FLASH->CR &= CR_OPTPG_Reset;
000324  6921              LDR      r1,[r4,#0x10]
000326  f64172ef          MOV      r2,#0x1fef
00032a  4011              ANDS     r1,r1,r2
00032c  6121              STR      r1,[r4,#0x10]
                  |L1.814|
;;;1033       }
;;;1034     } 
;;;1035     /* Return the write protection operation Status */
;;;1036     return status;       
;;;1037   }
00032e  e8bd81f0          POP      {r4-r8,pc}
;;;1038   
                          ENDP

                  FLASH_ReadOutProtection PROC
;;;1048     */
;;;1049   FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
000332  b570              PUSH     {r4-r6,lr}
;;;1050   {
000334  4605              MOV      r5,r0
;;;1051     FLASH_Status status = FLASH_COMPLETE;
;;;1052     /* Check the parameters */
;;;1053     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1054     status = FLASH_WaitForLastOperation(EraseTimeout);
000336  f44f2630          MOV      r6,#0xb0000
00033a  4630              MOV      r0,r6
00033c  f7fffffe          BL       FLASH_WaitForLastOperation
;;;1055     if(status == FLASH_COMPLETE)
000340  2804              CMP      r0,#4
000342  d118              BNE      |L1.886|
;;;1056     {
;;;1057       /* Authorizes the small information block programming */
;;;1058       FLASH->OPTKEYR = FLASH_KEY1;
000344  4c2b              LDR      r4,|L1.1012|
000346  482c              LDR      r0,|L1.1016|
000348  60a0              STR      r0,[r4,#8]
;;;1059       FLASH->OPTKEYR = FLASH_KEY2;
00034a  482c              LDR      r0,|L1.1020|
00034c  60a0              STR      r0,[r4,#8]
;;;1060       FLASH->CR |= CR_OPTER_Set;
00034e  6920              LDR      r0,[r4,#0x10]
000350  f0400020          ORR      r0,r0,#0x20
000354  6120              STR      r0,[r4,#0x10]
;;;1061       FLASH->CR |= CR_STRT_Set;
000356  6920              LDR      r0,[r4,#0x10]
000358  f0400040          ORR      r0,r0,#0x40
00035c  6120              STR      r0,[r4,#0x10]
;;;1062       /* Wait for last operation to be completed */
;;;1063       status = FLASH_WaitForLastOperation(EraseTimeout);
00035e  4630              MOV      r0,r6
000360  f7fffffe          BL       FLASH_WaitForLastOperation
;;;1064       if(status == FLASH_COMPLETE)
;;;1065       {
;;;1066         /* if the erase operation is completed, disable the OPTER Bit */
;;;1067         FLASH->CR &= CR_OPTER_Reset;
000364  f64171df          MOV      r1,#0x1fdf
000368  2804              CMP      r0,#4                 ;1064
00036a  d005              BEQ      |L1.888|
;;;1068         /* Enable the Option Bytes Programming operation */
;;;1069         FLASH->CR |= CR_OPTPG_Set; 
;;;1070         if(NewState != DISABLE)
;;;1071         {
;;;1072           OB->RDP = 0x00;
;;;1073         }
;;;1074         else
;;;1075         {
;;;1076           OB->RDP = RDP_Key;  
;;;1077         }
;;;1078         /* Wait for last operation to be completed */
;;;1079         status = FLASH_WaitForLastOperation(EraseTimeout); 
;;;1080       
;;;1081         if(status != FLASH_TIMEOUT)
;;;1082         {
;;;1083           /* if the program operation is completed, disable the OPTPG Bit */
;;;1084           FLASH->CR &= CR_OPTPG_Reset;
;;;1085         }
;;;1086       }
;;;1087       else 
;;;1088       {
;;;1089         if(status != FLASH_TIMEOUT)
00036c  2805              CMP      r0,#5
00036e  d002              BEQ      |L1.886|
;;;1090         {
;;;1091           /* Disable the OPTER Bit */
;;;1092           FLASH->CR &= CR_OPTER_Reset;
000370  6922              LDR      r2,[r4,#0x10]
000372  400a              ANDS     r2,r2,r1
000374  6122              STR      r2,[r4,#0x10]
                  |L1.886|
;;;1093         }
;;;1094       }
;;;1095     }
;;;1096     /* Return the protection operation Status */
;;;1097     return status;       
;;;1098   }
000376  bd70              POP      {r4-r6,pc}
                  |L1.888|
000378  6920              LDR      r0,[r4,#0x10]         ;1067
00037a  4008              ANDS     r0,r0,r1              ;1067
00037c  6120              STR      r0,[r4,#0x10]         ;1067
00037e  6920              LDR      r0,[r4,#0x10]         ;1069
000380  f0400010          ORR      r0,r0,#0x10           ;1069
000384  6120              STR      r0,[r4,#0x10]         ;1069
000386  481e              LDR      r0,|L1.1024|
000388  b10d              CBZ      r5,|L1.910|
00038a  2100              MOVS     r1,#0                 ;1072
00038c  e000              B        |L1.912|
                  |L1.910|
00038e  21a5              MOVS     r1,#0xa5              ;1076
                  |L1.912|
000390  8001              STRH     r1,[r0,#0]            ;1076
000392  4630              MOV      r0,r6                 ;1079
000394  f7fffffe          BL       FLASH_WaitForLastOperation
000398  2805              CMP      r0,#5                 ;1081
00039a  d0ec              BEQ      |L1.886|
00039c  6921              LDR      r1,[r4,#0x10]         ;1084
00039e  f64172ef          MOV      r2,#0x1fef            ;1084
0003a2  4011              ANDS     r1,r1,r2              ;1084
0003a4  6121              STR      r1,[r4,#0x10]         ;1084
0003a6  bd70              POP      {r4-r6,pc}
;;;1099   
                          ENDP

                  FLASH_UserOptionByteConfig PROC
;;;1117     */
;;;1118   FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
0003a8  b5f0              PUSH     {r4-r7,lr}
;;;1119   {
;;;1120     FLASH_Status status = FLASH_COMPLETE; 
;;;1121   
;;;1122     /* Check the parameters */
;;;1123     assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
;;;1124     assert_param(IS_OB_STOP_SOURCE(OB_STOP));
;;;1125     assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
;;;1126   
;;;1127     /* Authorize the small information block programming */
;;;1128     FLASH->OPTKEYR = FLASH_KEY1;
0003aa  4c12              LDR      r4,|L1.1012|
0003ac  4607              MOV      r7,r0                 ;1119
0003ae  4812              LDR      r0,|L1.1016|
0003b0  4616              MOV      r6,r2                 ;1119
0003b2  460d              MOV      r5,r1                 ;1119
0003b4  60a0              STR      r0,[r4,#8]
;;;1129     FLASH->OPTKEYR = FLASH_KEY2;
0003b6  4811              LDR      r0,|L1.1020|
0003b8  60a0              STR      r0,[r4,#8]
;;;1130     
;;;1131     /* Wait for last operation to be completed */
;;;1132     status = FLASH_WaitForLastOperation(ProgramTimeout);
0003ba  f44f5c00          MOV      r12,#0x2000
0003be  4660              MOV      r0,r12
0003c0  f7fffffe          BL       FLASH_WaitForLastOperation
;;;1133     
;;;1134     if(status == FLASH_COMPLETE)
0003c4  2804              CMP      r0,#4
0003c6  d114              BNE      |L1.1010|
;;;1135     {  
;;;1136       /* Enable the Option Bytes Programming operation */
;;;1137       FLASH->CR |= CR_OPTPG_Set; 
0003c8  6920              LDR      r0,[r4,#0x10]
0003ca  f0400010          ORR      r0,r0,#0x10
0003ce  6120              STR      r0,[r4,#0x10]
;;;1138              
;;;1139       OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
0003d0  4335              ORRS     r5,r5,r6
0003d2  490b              LDR      r1,|L1.1024|
0003d4  433d              ORRS     r5,r5,r7
0003d6  1c89              ADDS     r1,r1,#2
0003d8  f04500f8          ORR      r0,r5,#0xf8
0003dc  8008              STRH     r0,[r1,#0]
;;;1140     
;;;1141       /* Wait for last operation to be completed */
;;;1142       status = FLASH_WaitForLastOperation(ProgramTimeout);
0003de  4660              MOV      r0,r12
0003e0  f7fffffe          BL       FLASH_WaitForLastOperation
;;;1143       if(status != FLASH_TIMEOUT)
0003e4  2805              CMP      r0,#5
0003e6  d004              BEQ      |L1.1010|
;;;1144       {
;;;1145         /* if the program operation is completed, disable the OPTPG Bit */
;;;1146         FLASH->CR &= CR_OPTPG_Reset;
0003e8  6921              LDR      r1,[r4,#0x10]
0003ea  f64172ef          MOV      r2,#0x1fef
0003ee  4011              ANDS     r1,r1,r2
0003f0  6121              STR      r1,[r4,#0x10]
                  |L1.1010|
;;;1147       }
;;;1148     }    
;;;1149     /* Return the Option Byte program Status */
;;;1150     return status;
;;;1151   }
0003f2  bdf0              POP      {r4-r7,pc}
                  |L1.1012|
                          DCD      0x40022000
                  |L1.1016|
                          DCD      0x45670123
                  |L1.1020|
                          DCD      0xcdef89ab
                  |L1.1024|
                          DCD      0x1ffff800
                          ENDP

                  FLASH_GetUserOptionByte PROC
;;;1215     */
;;;1216   uint32_t FLASH_GetUserOptionByte(void)
000404  481c              LDR      r0,|L1.1144|
;;;1217   {
;;;1218     /* Return the User Option Byte */
;;;1219     return (uint32_t)(FLASH->OBR >> 2);
000406  69c0              LDR      r0,[r0,#0x1c]
000408  0880              LSRS     r0,r0,#2
;;;1220   }
00040a  4770              BX       lr
;;;1221   
                          ENDP

                  FLASH_GetWriteProtectionOptionByte PROC
;;;1227     */
;;;1228   uint32_t FLASH_GetWriteProtectionOptionByte(void)
00040c  481a              LDR      r0,|L1.1144|
;;;1229   {
;;;1230     /* Return the Flash write protection Register value */
;;;1231     return (uint32_t)(FLASH->WRPR);
00040e  6a00              LDR      r0,[r0,#0x20]
;;;1232   }
000410  4770              BX       lr
;;;1233   
                          ENDP

                  FLASH_GetPrefetchBufferStatus PROC
;;;1259     */
;;;1260   FlagStatus FLASH_GetPrefetchBufferStatus(void)
000412  4919              LDR      r1,|L1.1144|
;;;1261   {
;;;1262     FlagStatus bitstatus = RESET;
000414  2000              MOVS     r0,#0
;;;1263     
;;;1264     if ((FLASH->ACR & ACR_PRFTBS_Mask) != (uint32_t)RESET)
000416  6809              LDR      r1,[r1,#0]
000418  0689              LSLS     r1,r1,#26
00041a  d500              BPL      |L1.1054|
;;;1265     {
;;;1266       bitstatus = SET;
00041c  2001              MOVS     r0,#1
                  |L1.1054|
;;;1267     }
;;;1268     else
;;;1269     {
;;;1270       bitstatus = RESET;
;;;1271     }
;;;1272     /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
;;;1273     return bitstatus; 
;;;1274   }
00041e  4770              BX       lr
;;;1275   
                          ENDP

                  FLASH_ITConfig PROC
;;;1289     */
;;;1290   void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
000420  4a15              LDR      r2,|L1.1144|
;;;1291   {
;;;1292   #ifdef STM32F10X_XL
;;;1293     /* Check the parameters */
;;;1294     assert_param(IS_FLASH_IT(FLASH_IT)); 
;;;1295     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1296   
;;;1297     if((FLASH_IT & 0x80000000) != 0x0)
;;;1298     {
;;;1299       if(NewState != DISABLE)
;;;1300       {
;;;1301         /* Enable the interrupt sources */
;;;1302         FLASH->CR2 |= (FLASH_IT & 0x7FFFFFFF);
;;;1303       }
;;;1304       else
;;;1305       {
;;;1306         /* Disable the interrupt sources */
;;;1307         FLASH->CR2 &= ~(uint32_t)(FLASH_IT & 0x7FFFFFFF);
;;;1308       }
;;;1309     }
;;;1310     else
;;;1311     {
;;;1312       if(NewState != DISABLE)
;;;1313       {
;;;1314         /* Enable the interrupt sources */
;;;1315         FLASH->CR |= FLASH_IT;
;;;1316       }
;;;1317       else
;;;1318       {
;;;1319         /* Disable the interrupt sources */
;;;1320         FLASH->CR &= ~(uint32_t)FLASH_IT;
;;;1321       }
;;;1322     }
;;;1323   #else
;;;1324     /* Check the parameters */
;;;1325     assert_param(IS_FLASH_IT(FLASH_IT)); 
;;;1326     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1327   
;;;1328     if(NewState != DISABLE)
000422  2900              CMP      r1,#0
;;;1329     {
;;;1330       /* Enable the interrupt sources */
;;;1331       FLASH->CR |= FLASH_IT;
;;;1332     }
;;;1333     else
;;;1334     {
;;;1335       /* Disable the interrupt sources */
;;;1336       FLASH->CR &= ~(uint32_t)FLASH_IT;
000424  6911              LDR      r1,[r2,#0x10]
000426  d001              BEQ      |L1.1068|
000428  4301              ORRS     r1,r1,r0              ;1331
00042a  e000              B        |L1.1070|
                  |L1.1068|
00042c  4381              BICS     r1,r1,r0
                  |L1.1070|
00042e  6111              STR      r1,[r2,#0x10]         ;1331
;;;1337     }
;;;1338   #endif /* STM32F10X_XL */
;;;1339   }
000430  4770              BX       lr
;;;1340   
                          ENDP

                  FLASH_GetFlagStatus PROC
;;;1356     */
;;;1357   FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
000432  4601              MOV      r1,r0
;;;1358   {
;;;1359     FlagStatus bitstatus = RESET;
000434  2000              MOVS     r0,#0
;;;1360   
;;;1361   #ifdef STM32F10X_XL
;;;1362     /* Check the parameters */
;;;1363     assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;
;;;1364     if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
;;;1365     {
;;;1366       if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
;;;1367       {
;;;1368         bitstatus = SET;
;;;1369       }
;;;1370       else
;;;1371       {
;;;1372         bitstatus = RESET;
;;;1373       }
;;;1374     }
;;;1375     else
;;;1376     {
;;;1377       if((FLASH_FLAG & 0x80000000) != 0x0)
;;;1378       {
;;;1379         if((FLASH->SR2 & FLASH_FLAG) != (uint32_t)RESET)
;;;1380         {
;;;1381           bitstatus = SET;
;;;1382         }
;;;1383         else
;;;1384         {
;;;1385           bitstatus = RESET;
;;;1386         }
;;;1387       }
;;;1388       else
;;;1389       {
;;;1390         if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
;;;1391         {
;;;1392           bitstatus = SET;
;;;1393         }
;;;1394         else
;;;1395         {
;;;1396           bitstatus = RESET;
;;;1397         }
;;;1398       }
;;;1399     }
;;;1400   #else
;;;1401     /* Check the parameters */
;;;1402     assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;
;;;1403     if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
;;;1404     {
;;;1405       if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
000436  4a10              LDR      r2,|L1.1144|
000438  2901              CMP      r1,#1                 ;1403
00043a  d003              BEQ      |L1.1092|
;;;1406       {
;;;1407         bitstatus = SET;
;;;1408       }
;;;1409       else
;;;1410       {
;;;1411         bitstatus = RESET;
;;;1412       }
;;;1413     }
;;;1414     else
;;;1415     {
;;;1416      if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
00043c  68d2              LDR      r2,[r2,#0xc]
00043e  420a              TST      r2,r1
000440  d103              BNE      |L1.1098|
                  |L1.1090|
;;;1417       {
;;;1418         bitstatus = SET;
;;;1419       }
;;;1420       else
;;;1421       {
;;;1422         bitstatus = RESET;
;;;1423       }
;;;1424     }
;;;1425   #endif /* STM32F10X_XL */
;;;1426   
;;;1427     /* Return the new state of FLASH_FLAG (SET or RESET) */
;;;1428     return bitstatus;
;;;1429   }
000442  4770              BX       lr
                  |L1.1092|
000444  69d1              LDR      r1,[r2,#0x1c]         ;1405
000446  07c9              LSLS     r1,r1,#31             ;1405
000448  d0fb              BEQ      |L1.1090|
                  |L1.1098|
00044a  2001              MOVS     r0,#1                 ;1407
00044c  4770              BX       lr
;;;1430   
                          ENDP

                  FLASH_ClearFlag PROC
;;;1442     */
;;;1443   void FLASH_ClearFlag(uint32_t FLASH_FLAG)
00044e  490a              LDR      r1,|L1.1144|
;;;1444   {
;;;1445   #ifdef STM32F10X_XL
;;;1446     /* Check the parameters */
;;;1447     assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
;;;1448   
;;;1449     if((FLASH_FLAG & 0x80000000) != 0x0)
;;;1450     {
;;;1451       /* Clear the flags */
;;;1452       FLASH->SR2 = FLASH_FLAG;
;;;1453     }
;;;1454     else
;;;1455     {
;;;1456       /* Clear the flags */
;;;1457       FLASH->SR = FLASH_FLAG;
;;;1458     }  
;;;1459   
;;;1460   #else
;;;1461     /* Check the parameters */
;;;1462     assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
;;;1463     
;;;1464     /* Clear the flags */
;;;1465     FLASH->SR = FLASH_FLAG;
000450  60c8              STR      r0,[r1,#0xc]
;;;1466   #endif /* STM32F10X_XL */
;;;1467   }
000452  4770              BX       lr
;;;1468   
                          ENDP

                  FLASH_GetStatus PROC
;;;1476     */
;;;1477   FLASH_Status FLASH_GetStatus(void)
000454  4908              LDR      r1,|L1.1144|
;;;1478   {
;;;1479     FLASH_Status flashstatus = FLASH_COMPLETE;
000456  2004              MOVS     r0,#4
;;;1480     
;;;1481     if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
000458  68ca              LDR      r2,[r1,#0xc]
00045a  07d2              LSLS     r2,r2,#31
00045c  d001              BEQ      |L1.1122|
;;;1482     {
;;;1483       flashstatus = FLASH_BUSY;
00045e  2001              MOVS     r0,#1
;;;1484     }
;;;1485     else 
;;;1486     {  
;;;1487       if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
;;;1488       { 
;;;1489         flashstatus = FLASH_ERROR_PG;
;;;1490       }
;;;1491       else 
;;;1492       {
;;;1493         if((FLASH->SR & FLASH_FLAG_WRPRTERR) != 0 )
;;;1494         {
;;;1495           flashstatus = FLASH_ERROR_WRP;
;;;1496         }
;;;1497         else
;;;1498         {
;;;1499           flashstatus = FLASH_COMPLETE;
;;;1500         }
;;;1501       }
;;;1502     }
;;;1503     /* Return the Flash Status */
;;;1504     return flashstatus;
;;;1505   }
000460  4770              BX       lr
                  |L1.1122|
000462  68ca              LDR      r2,[r1,#0xc]          ;1487
000464  0752              LSLS     r2,r2,#29             ;1487
000466  d501              BPL      |L1.1132|
000468  2002              MOVS     r0,#2                 ;1489
                  |L1.1130|
00046a  4770              BX       lr
                  |L1.1132|
00046c  68c9              LDR      r1,[r1,#0xc]          ;1493
00046e  06c9              LSLS     r1,r1,#27             ;1493
000470  d5fb              BPL      |L1.1130|
000472  2003              MOVS     r0,#3                 ;1495
000474  4770              BX       lr
;;;1506   
                          ENDP

000476  0000              DCW      0x0000
                  |L1.1144|
                          DCD      0x40022000
