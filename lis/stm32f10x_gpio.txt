; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\stm32f10x_gpio.o --asm_dir=.\lis\ --list_dir=.\lis\ --depend=.\stm32f10x_gpio.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\user\inc -I.\stdperiph_driver\inc -I.\cmsis -ID:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=521 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\stm32f10x_gpio.crf stdperiph_driver\src\stm32f10x_gpio.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;107      */
;;;108    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  4991              LDR      r1,|L1.584|
;;;109    {
000002  b510              PUSH     {r4,lr}
;;;110      /* Check the parameters */
;;;111      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;112      
;;;113      if (GPIOx == GPIOA)
000004  4288              CMP      r0,r1
000006  d106              BNE      |L1.22|
;;;114      {
;;;115        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
000008  2101              MOVS     r1,#1
00000a  2004              MOVS     r0,#4
00000c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;116        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
000010  2100              MOVS     r1,#0
000012  2004              MOVS     r0,#4
000014  e03b              B        |L1.142|
                  |L1.22|
;;;117      }
;;;118      else if (GPIOx == GPIOB)
000016  498d              LDR      r1,|L1.588|
000018  4288              CMP      r0,r1
00001a  d106              BNE      |L1.42|
;;;119      {
;;;120        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
00001c  2101              MOVS     r1,#1
00001e  2008              MOVS     r0,#8
000020  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;121        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
000024  2100              MOVS     r1,#0
000026  2008              MOVS     r0,#8
000028  e031              B        |L1.142|
                  |L1.42|
;;;122      }
;;;123      else if (GPIOx == GPIOC)
00002a  4989              LDR      r1,|L1.592|
00002c  4288              CMP      r0,r1
00002e  d106              BNE      |L1.62|
;;;124      {
;;;125        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
000030  2101              MOVS     r1,#1
000032  2010              MOVS     r0,#0x10
000034  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;126        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
000038  2100              MOVS     r1,#0
00003a  2010              MOVS     r0,#0x10
00003c  e027              B        |L1.142|
                  |L1.62|
;;;127      }
;;;128      else if (GPIOx == GPIOD)
00003e  4985              LDR      r1,|L1.596|
000040  4288              CMP      r0,r1
000042  d106              BNE      |L1.82|
;;;129      {
;;;130        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
000044  2101              MOVS     r1,#1
000046  2020              MOVS     r0,#0x20
000048  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;131        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
00004c  2100              MOVS     r1,#0
00004e  2020              MOVS     r0,#0x20
000050  e01d              B        |L1.142|
                  |L1.82|
;;;132      }    
;;;133      else if (GPIOx == GPIOE)
000052  4981              LDR      r1,|L1.600|
000054  4288              CMP      r0,r1
000056  d106              BNE      |L1.102|
;;;134      {
;;;135        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
000058  2101              MOVS     r1,#1
00005a  2040              MOVS     r0,#0x40
00005c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;136        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
000060  2100              MOVS     r1,#0
000062  2040              MOVS     r0,#0x40
000064  e013              B        |L1.142|
                  |L1.102|
;;;137      } 
;;;138      else if (GPIOx == GPIOF)
000066  497d              LDR      r1,|L1.604|
000068  4288              CMP      r0,r1
00006a  d106              BNE      |L1.122|
;;;139      {
;;;140        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
00006c  2101              MOVS     r1,#1
00006e  2080              MOVS     r0,#0x80
000070  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;141        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
000074  2100              MOVS     r1,#0
000076  2080              MOVS     r0,#0x80
000078  e009              B        |L1.142|
                  |L1.122|
;;;142      }
;;;143      else
;;;144      {
;;;145        if (GPIOx == GPIOG)
00007a  4979              LDR      r1,|L1.608|
00007c  4288              CMP      r0,r1
00007e  d10a              BNE      |L1.150|
;;;146        {
;;;147          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
000080  1584              ASRS     r4,r0,#22
000082  2101              MOVS     r1,#1
000084  4620              MOV      r0,r4
000086  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;148          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
00008a  2100              MOVS     r1,#0
00008c  4620              MOV      r0,r4
                  |L1.142|
00008e  e8bd4010          POP      {r4,lr}
000092  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.150|
;;;149        }
;;;150      }
;;;151    }
000096  bd10              POP      {r4,pc}
;;;152    
                          ENDP

                  GPIO_AFIODeInit PROC
;;;158      */
;;;159    void GPIO_AFIODeInit(void)
000098  b510              PUSH     {r4,lr}
;;;160    {
;;;161      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
00009a  2101              MOVS     r1,#1
00009c  4608              MOV      r0,r1
00009e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;162      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
0000a2  2100              MOVS     r1,#0
0000a4  e8bd4010          POP      {r4,lr}
0000a8  2001              MOVS     r0,#1
0000aa  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
;;;163    }
;;;164    
                          ENDP

                  GPIO_Init PROC
;;;172      */
;;;173    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
0000ae  b5f0              PUSH     {r4-r7,lr}
;;;174    {
;;;175      uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
;;;176      uint32_t tmpreg = 0x00, pinmask = 0x00;
;;;177      /* Check the parameters */
;;;178      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;179      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;180      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
;;;181      
;;;182    /*---------------------------- GPIO Mode Configuration -----------------------*/
;;;183      currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
0000b0  78ca              LDRB     r2,[r1,#3]
0000b2  2500              MOVS     r5,#0                 ;175
0000b4  f002030f          AND      r3,r2,#0xf
;;;184      if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
0000b8  06d2              LSLS     r2,r2,#27
0000ba  d501              BPL      |L1.192|
;;;185      { 
;;;186        /* Check the parameters */
;;;187        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;188        /* Output mode */
;;;189        currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
0000bc  788a              LDRB     r2,[r1,#2]
0000be  4313              ORRS     r3,r3,r2
                  |L1.192|
;;;190      }
;;;191    /*---------------------------- GPIO CRL Configuration ------------------------*/
;;;192      /* Configure the eight low port pins */
;;;193      if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
0000c0  780a              LDRB     r2,[r1,#0]
;;;194      {
;;;195        tmpreg = GPIOx->CRL;
;;;196        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
;;;197        {
;;;198          pos = ((uint32_t)0x01) << pinpos;
;;;199          /* Get the port pins position */
;;;200          currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
;;;201          if (currentpin == pos)
;;;202          {
;;;203            pos = pinpos << 2;
;;;204            /* Clear the corresponding low control register bits */
;;;205            pinmask = ((uint32_t)0x0F) << pos;
0000c2  f04f0e0f          MOV      lr,#0xf
0000c6  f0120fff          TST      r2,#0xff              ;193
0000ca  f04f0201          MOV      r2,#1                 ;198
0000ce  d01d              BEQ      |L1.268|
0000d0  f8d04000          LDR.W    r4,[r0,#0]            ;195
                  |L1.212|
0000d4  880f              LDRH     r7,[r1,#0]            ;200
0000d6  fa02f605          LSL      r6,r2,r5              ;198
0000da  4037              ANDS     r7,r7,r6              ;200
0000dc  42b7              CMP      r7,r6                 ;201
0000de  d111              BNE      |L1.260|
0000e0  ea4f0c85          LSL      r12,r5,#2             ;201
0000e4  fa0ef70c          LSL      r7,lr,r12
;;;206            tmpreg &= ~pinmask;
0000e8  ea240707          BIC      r7,r4,r7
;;;207            /* Write the mode configuration in the corresponding bits */
;;;208            tmpreg |= (currentmode << pos);
0000ec  fa03f40c          LSL      r4,r3,r12
0000f0  433c              ORRS     r4,r4,r7
;;;209            /* Reset the corresponding ODR bit */
;;;210            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
0000f2  78cf              LDRB     r7,[r1,#3]
0000f4  2f28              CMP      r7,#0x28
0000f6  d002              BEQ      |L1.254|
;;;211            {
;;;212              GPIOx->BRR = (((uint32_t)0x01) << pinpos);
;;;213            }
;;;214            else
;;;215            {
;;;216              /* Set the corresponding ODR bit */
;;;217              if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
0000f8  2f48              CMP      r7,#0x48
0000fa  d002              BEQ      |L1.258|
0000fc  e002              B        |L1.260|
                  |L1.254|
0000fe  6146              STR      r6,[r0,#0x14]         ;212
000100  e000              B        |L1.260|
                  |L1.258|
;;;218              {
;;;219                GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
000102  6106              STR      r6,[r0,#0x10]
                  |L1.260|
000104  1c6d              ADDS     r5,r5,#1
000106  2d08              CMP      r5,#8                 ;196
000108  d3e4              BCC      |L1.212|
;;;220              }
;;;221            }
;;;222          }
;;;223        }
;;;224        GPIOx->CRL = tmpreg;
00010a  6004              STR      r4,[r0,#0]
                  |L1.268|
;;;225      }
;;;226    /*---------------------------- GPIO CRH Configuration ------------------------*/
;;;227      /* Configure the eight high port pins */
;;;228      if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
00010c  880c              LDRH     r4,[r1,#0]
00010e  2cff              CMP      r4,#0xff
000110  d91e              BLS      |L1.336|
;;;229      {
;;;230        tmpreg = GPIOx->CRH;
000112  6844              LDR      r4,[r0,#4]
;;;231        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
000114  f05f0600          MOVS.W   r6,#0
                  |L1.280|
;;;232        {
;;;233          pos = (((uint32_t)0x01) << (pinpos + 0x08));
000118  f1060708          ADD      r7,r6,#8
00011c  fa02f507          LSL      r5,r2,r7
;;;234          /* Get the port pins position */
;;;235          currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
000120  880f              LDRH     r7,[r1,#0]
000122  402f              ANDS     r7,r7,r5
;;;236          if (currentpin == pos)
000124  42af              CMP      r7,r5
000126  d10f              BNE      |L1.328|
000128  ea4f0c86          LSL      r12,r6,#2
;;;237          {
;;;238            pos = pinpos << 2;
;;;239            /* Clear the corresponding high control register bits */
;;;240            pinmask = ((uint32_t)0x0F) << pos;
00012c  fa0ef70c          LSL      r7,lr,r12
;;;241            tmpreg &= ~pinmask;
000130  43bc              BICS     r4,r4,r7
;;;242            /* Write the mode configuration in the corresponding bits */
;;;243            tmpreg |= (currentmode << pos);
000132  fa03f70c          LSL      r7,r3,r12
000136  433c              ORRS     r4,r4,r7
;;;244            /* Reset the corresponding ODR bit */
;;;245            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
000138  78cf              LDRB     r7,[r1,#3]
00013a  2f28              CMP      r7,#0x28
00013c  d100              BNE      |L1.320|
;;;246            {
;;;247              GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
00013e  6145              STR      r5,[r0,#0x14]
                  |L1.320|
;;;248            }
;;;249            /* Set the corresponding ODR bit */
;;;250            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
000140  78cf              LDRB     r7,[r1,#3]
000142  2f48              CMP      r7,#0x48
000144  d100              BNE      |L1.328|
;;;251            {
;;;252              GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
000146  6105              STR      r5,[r0,#0x10]
                  |L1.328|
000148  1c76              ADDS     r6,r6,#1
00014a  2e08              CMP      r6,#8                 ;231
00014c  d3e4              BCC      |L1.280|
;;;253            }
;;;254          }
;;;255        }
;;;256        GPIOx->CRH = tmpreg;
00014e  6044              STR      r4,[r0,#4]
                  |L1.336|
;;;257      }
;;;258    }
000150  bdf0              POP      {r4-r7,pc}
;;;259    
                          ENDP

                  GPIO_StructInit PROC
;;;265      */
;;;266    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000152  f64f71ff          MOV      r1,#0xffff
;;;267    {
;;;268      /* Reset GPIO init structure parameters values */
;;;269      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
000156  8001              STRH     r1,[r0,#0]
;;;270      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
000158  2102              MOVS     r1,#2
00015a  7081              STRB     r1,[r0,#2]
;;;271      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
00015c  2104              MOVS     r1,#4
00015e  70c1              STRB     r1,[r0,#3]
;;;272    }
000160  4770              BX       lr
;;;273    
                          ENDP

                  GPIO_ReadInputDataBit PROC
;;;280      */
;;;281    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000162  4602              MOV      r2,r0
;;;282    {
;;;283      uint8_t bitstatus = 0x00;
000164  2000              MOVS     r0,#0
;;;284      
;;;285      /* Check the parameters */
;;;286      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;287      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;288      
;;;289      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
000166  6892              LDR      r2,[r2,#8]
000168  420a              TST      r2,r1
00016a  d000              BEQ      |L1.366|
;;;290      {
;;;291        bitstatus = (uint8_t)Bit_SET;
00016c  2001              MOVS     r0,#1
                  |L1.366|
;;;292      }
;;;293      else
;;;294      {
;;;295        bitstatus = (uint8_t)Bit_RESET;
;;;296      }
;;;297      return bitstatus;
;;;298    }
00016e  4770              BX       lr
;;;299    
                          ENDP

                  GPIO_ReadInputData PROC
;;;304      */
;;;305    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
000170  6880              LDR      r0,[r0,#8]
;;;306    {
;;;307      /* Check the parameters */
;;;308      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;309      
;;;310      return ((uint16_t)GPIOx->IDR);
000172  b280              UXTH     r0,r0
;;;311    }
000174  4770              BX       lr
;;;312    
                          ENDP

                  GPIO_ReadOutputDataBit PROC
;;;319      */
;;;320    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000176  4602              MOV      r2,r0
;;;321    {
;;;322      uint8_t bitstatus = 0x00;
000178  2000              MOVS     r0,#0
;;;323      /* Check the parameters */
;;;324      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;325      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;326      
;;;327      if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
00017a  68d2              LDR      r2,[r2,#0xc]
00017c  420a              TST      r2,r1
00017e  d000              BEQ      |L1.386|
;;;328      {
;;;329        bitstatus = (uint8_t)Bit_SET;
000180  2001              MOVS     r0,#1
                  |L1.386|
;;;330      }
;;;331      else
;;;332      {
;;;333        bitstatus = (uint8_t)Bit_RESET;
;;;334      }
;;;335      return bitstatus;
;;;336    }
000182  4770              BX       lr
;;;337    
                          ENDP

                  GPIO_ReadOutputData PROC
;;;342      */
;;;343    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
000184  68c0              LDR      r0,[r0,#0xc]
;;;344    {
;;;345      /* Check the parameters */
;;;346      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;347        
;;;348      return ((uint16_t)GPIOx->ODR);
000186  b280              UXTH     r0,r0
;;;349    }
000188  4770              BX       lr
;;;350    
                          ENDP

                  GPIO_SetBits PROC
;;;357      */
;;;358    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
00018a  6101              STR      r1,[r0,#0x10]
;;;359    {
;;;360      /* Check the parameters */
;;;361      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;362      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;363      
;;;364      GPIOx->BSRR = GPIO_Pin;
;;;365    }
00018c  4770              BX       lr
;;;366    
                          ENDP

                  GPIO_ResetBits PROC
;;;373      */
;;;374    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
00018e  6141              STR      r1,[r0,#0x14]
;;;375    {
;;;376      /* Check the parameters */
;;;377      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;378      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;379      
;;;380      GPIOx->BRR = GPIO_Pin;
;;;381    }
000190  4770              BX       lr
;;;382    
                          ENDP

                  GPIO_WriteBit PROC
;;;393      */
;;;394    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
000192  b10a              CBZ      r2,|L1.408|
;;;395    {
;;;396      /* Check the parameters */
;;;397      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;398      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;399      assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
;;;400      
;;;401      if (BitVal != Bit_RESET)
;;;402      {
;;;403        GPIOx->BSRR = GPIO_Pin;
000194  6101              STR      r1,[r0,#0x10]
;;;404      }
;;;405      else
;;;406      {
;;;407        GPIOx->BRR = GPIO_Pin;
;;;408      }
;;;409    }
000196  4770              BX       lr
                  |L1.408|
000198  6141              STR      r1,[r0,#0x14]         ;407
00019a  4770              BX       lr
;;;410    
                          ENDP

                  GPIO_Write PROC
;;;416      */
;;;417    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
00019c  60c1              STR      r1,[r0,#0xc]
;;;418    {
;;;419      /* Check the parameters */
;;;420      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;421      
;;;422      GPIOx->ODR = PortVal;
;;;423    }
00019e  4770              BX       lr
;;;424    
                          ENDP

                  GPIO_PinLockConfig PROC
;;;431      */
;;;432    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0001a0  f4413280          ORR      r2,r1,#0x10000
;;;433    {
;;;434      uint32_t tmp = 0x00010000;
;;;435      
;;;436      /* Check the parameters */
;;;437      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;438      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;439      
;;;440      tmp |= GPIO_Pin;
;;;441      /* Set LCKK bit */
;;;442      GPIOx->LCKR = tmp;
0001a4  6182              STR      r2,[r0,#0x18]
;;;443      /* Reset LCKK bit */
;;;444      GPIOx->LCKR =  GPIO_Pin;
0001a6  6181              STR      r1,[r0,#0x18]
;;;445      /* Set LCKK bit */
;;;446      GPIOx->LCKR = tmp;
0001a8  6182              STR      r2,[r0,#0x18]
;;;447      /* Read LCKK bit*/
;;;448      tmp = GPIOx->LCKR;
0001aa  6981              LDR      r1,[r0,#0x18]
;;;449      /* Read LCKK bit*/
;;;450      tmp = GPIOx->LCKR;
0001ac  6980              LDR      r0,[r0,#0x18]
;;;451    }
0001ae  4770              BX       lr
;;;452    
                          ENDP

                  GPIO_EventOutputConfig PROC
;;;461      */
;;;462    void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
0001b0  4b2c              LDR      r3,|L1.612|
;;;463    {
0001b2  b510              PUSH     {r4,lr}
;;;464      uint32_t tmpreg = 0x00;
;;;465      /* Check the parameters */
;;;466      assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
;;;467      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;468        
;;;469      tmpreg = AFIO->EVCR;
0001b4  681a              LDR      r2,[r3,#0]
;;;470      /* Clear the PORT[6:4] and PIN[3:0] bits */
;;;471      tmpreg &= EVCR_PORTPINCONFIG_MASK;
0001b6  f64f7480          MOV      r4,#0xff80
0001ba  4022              ANDS     r2,r2,r4
;;;472      tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
0001bc  ea421000          ORR      r0,r2,r0,LSL #4
;;;473      tmpreg |= GPIO_PinSource;
0001c0  4308              ORRS     r0,r0,r1
;;;474      AFIO->EVCR = tmpreg;
0001c2  6018              STR      r0,[r3,#0]
;;;475    }
0001c4  bd10              POP      {r4,pc}
;;;476    
                          ENDP

                  GPIO_EventOutputCmd PROC
;;;482      */
;;;483    void GPIO_EventOutputCmd(FunctionalState NewState)
0001c6  4928              LDR      r1,|L1.616|
;;;484    {
;;;485      /* Check the parameters */
;;;486      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;487      
;;;488      *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
0001c8  61c8              STR      r0,[r1,#0x1c]
;;;489    }
0001ca  4770              BX       lr
;;;490    
                          ENDP

                  GPIO_PinRemapConfig PROC
;;;548      */
;;;549    void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
0001cc  b5f0              PUSH     {r4-r7,lr}
;;;550    {
;;;551      uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
;;;552    
;;;553      /* Check the parameters */
;;;554      assert_param(IS_GPIO_REMAP(GPIO_Remap));
;;;555      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;556      
;;;557      if((GPIO_Remap & 0x80000000) == 0x80000000)
;;;558      {
;;;559        tmpreg = AFIO->MAPR2;
0001ce  4c25              LDR      r4,|L1.612|
0001d0  2800              CMP      r0,#0                 ;557
0001d2  da01              BGE      |L1.472|
0001d4  69e3              LDR      r3,[r4,#0x1c]
0001d6  e000              B        |L1.474|
                  |L1.472|
;;;560      }
;;;561      else
;;;562      {
;;;563        tmpreg = AFIO->MAPR;
0001d8  6863              LDR      r3,[r4,#4]
                  |L1.474|
;;;564      }
;;;565    
;;;566      tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
;;;567      tmp = GPIO_Remap & LSB_MASK;
;;;568    
;;;569      if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
;;;570      {
;;;571        tmpreg &= DBGAFR_SWJCFG_MASK;
;;;572        AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
;;;573      }
;;;574      else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
;;;575      {
;;;576        tmp1 = ((uint32_t)0x03) << tmpmask;
;;;577        tmpreg &= ~tmp1;
;;;578        tmpreg |= ~DBGAFR_SWJCFG_MASK;
;;;579      }
;;;580      else
;;;581      {
;;;582        tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
0001da  0d42              LSRS     r2,r0,#21
0001dc  0112              LSLS     r2,r2,#4
0001de  b285              UXTH     r5,r0                 ;567
0001e0  f3c05701          UBFX     r7,r0,#20,#2          ;569
0001e4  4095              LSLS     r5,r5,r2
0001e6  f3c04603          UBFX     r6,r0,#16,#4          ;566
0001ea  2f03              CMP      r7,#3                 ;569
0001ec  d005              BEQ      |L1.506|
0001ee  02c2              LSLS     r2,r0,#11             ;574
0001f0  d50a              BPL      |L1.520|
0001f2  2203              MOVS     r2,#3                 ;576
0001f4  40b2              LSLS     r2,r2,r6              ;576
0001f6  4393              BICS     r3,r3,r2              ;577
0001f8  e007              B        |L1.522|
                  |L1.506|
0001fa  f0236270          BIC      r2,r3,#0xf000000      ;571
0001fe  6863              LDR      r3,[r4,#4]            ;572
000200  f0236370          BIC      r3,r3,#0xf000000      ;572
000204  6063              STR      r3,[r4,#4]            ;572
000206  e002              B        |L1.526|
                  |L1.520|
000208  43ab              BICS     r3,r3,r5
                  |L1.522|
00020a  f0436270          ORR      r2,r3,#0xf000000      ;578
                  |L1.526|
;;;583        tmpreg |= ~DBGAFR_SWJCFG_MASK;
;;;584      }
;;;585    
;;;586      if (NewState != DISABLE)
00020e  b101              CBZ      r1,|L1.530|
;;;587      {
;;;588        tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
000210  432a              ORRS     r2,r2,r5
                  |L1.530|
;;;589      }
;;;590    
;;;591      if((GPIO_Remap & 0x80000000) == 0x80000000)
000212  2800              CMP      r0,#0
000214  da01              BGE      |L1.538|
;;;592      {
;;;593        AFIO->MAPR2 = tmpreg;
000216  61e2              STR      r2,[r4,#0x1c]
;;;594      }
;;;595      else
;;;596      {
;;;597        AFIO->MAPR = tmpreg;
;;;598      }  
;;;599    }
000218  bdf0              POP      {r4-r7,pc}
                  |L1.538|
00021a  6062              STR      r2,[r4,#4]            ;597
00021c  bdf0              POP      {r4-r7,pc}
;;;600    
                          ENDP

                  GPIO_EXTILineConfig PROC
;;;608      */
;;;609    void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
00021e  b510              PUSH     {r4,lr}
;;;610    {
;;;611      uint32_t tmp = 0x00;
;;;612      /* Check the parameters */
;;;613      assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
;;;614      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;615      
;;;616      tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
000220  078a              LSLS     r2,r1,#30
;;;617      AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
000222  f0210403          BIC      r4,r1,#3
000226  490f              LDR      r1,|L1.612|
000228  0f13              LSRS     r3,r2,#28             ;616
00022a  4421              ADD      r1,r1,r4
00022c  220f              MOVS     r2,#0xf               ;616
00022e  688c              LDR      r4,[r1,#8]
000230  409a              LSLS     r2,r2,r3              ;616
000232  4394              BICS     r4,r4,r2
000234  608c              STR      r4,[r1,#8]
;;;618      AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
000236  688a              LDR      r2,[r1,#8]
000238  4098              LSLS     r0,r0,r3
00023a  4302              ORRS     r2,r2,r0
00023c  608a              STR      r2,[r1,#8]
;;;619    }
00023e  bd10              POP      {r4,pc}
;;;620    
                          ENDP

                  GPIO_ETH_MediaInterfaceConfig PROC
;;;629      */
;;;630    void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
000240  4909              LDR      r1,|L1.616|
;;;631    { 
;;;632      assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 
;;;633    
;;;634      /* Configure MII_RMII selection bit */ 
;;;635      *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
000242  f8c100dc          STR      r0,[r1,#0xdc]
;;;636    }
000246  4770              BX       lr
;;;637      
                          ENDP

                  |L1.584|
                          DCD      0x40010800
                  |L1.588|
                          DCD      0x40010c00
                  |L1.592|
                          DCD      0x40011000
                  |L1.596|
                          DCD      0x40011400
                  |L1.600|
                          DCD      0x40011800
                  |L1.604|
                          DCD      0x40011c00
                  |L1.608|
                          DCD      0x40012000
                  |L1.612|
                          DCD      0x40010000
                  |L1.616|
                          DCD      0x42200000
